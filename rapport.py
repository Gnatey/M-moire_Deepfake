# =============================================
# FONCTION POUR GENERER LE RAPPORT D'ANALYSE
# =============================================

def generate_analysis_report(filtered_df):
    """G√©n√®re un PDF avec la d√©marche d'analyse et les r√©sultats"""
    try:
        # Cr√©ation du PDF
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        
        # M√©tadonn√©es
        pdf.set_title("Analyse DeepFakes - R√©sultats")
        pdf.set_author("Dashboard DeepFakes")
        
        # Style
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Analyse des Donn√©es DeepFakes', 0, 1, 'C')
        pdf.ln(10)
        
        # Section 1: D√©marche d'analyse
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, '1. D√©marche d\'analyse des donn√©es', 0, 1)
        pdf.set_font('Arial', '', 12)
        
        methodology_text = """
        Cette analyse s'appuie sur une enqu√™te quantitative men√©e aupr√®s d'un √©chantillon de r√©pondants. 
        La d√©marche m√©thodologique comporte plusieurs √©tapes cl√©s :
        
        1. Collecte des donn√©es via un questionnaire en ligne
        2. Nettoyage et pr√©paration des donn√©es
        3. Analyse descriptive (statistiques, visualisations)
        4. Analyse statistique avanc√©e (tests, mod√©lisation)
        5. Interpr√©tation et validation des r√©sultats
        
        Les m√©thodes utilis√©es incluent :
        - Analyses univari√©es et bivari√©es
        - Tests du Chi2 et coefficients d'association
        - Mod√©lisation par r√©gression logistique
        - Analyse des intervalles de confiance
        """
        pdf.multi_cell(0, 10, methodology_text)
        pdf.ln(10)
        
        # Section 2: Principaux r√©sultats
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, '2. Principaux r√©sultats obtenus', 0, 1)
        pdf.set_font('Arial', '', 12)
        
        # Ajout des indicateurs cl√©s
        if not filtered_df.empty:
            # Calcul des indicateurs
            aware_pct = filtered_df["Connaissance DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            seen_pct = filtered_df["Exposition DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            trust_pct = filtered_df["Confiance r√©seaux sociaux"].apply(lambda x: 1 if x == 'Oui' else 0).mean() * 100
            
            results_text = f"""
            Principaux indicateurs :
            - {aware_pct:.1f}% des r√©pondants ont d√©j√† entendu parler des DeepFakes
            - {seen_pct:.1f}% ont d√©j√† vu un DeepFake sur les r√©seaux sociaux
            - Niveau de confiance moyen dans les r√©seaux sociaux : {trust_pct:.1f}%
            
            Analyses significatives :
            """
            pdf.multi_cell(0, 10, results_text)
            pdf.ln(5)
            
            # Ajout des visualisations principales
            img_paths = []
            
            # 1. Niveau de connaissance
            fig = px.bar(
                filtered_df["Niveau connaissance"].value_counts().reset_index(),
                x="Niveau connaissance",
                y="count",
                title="Niveau de connaissance des DeepFakes"
            )
            img_path = "knowledge_level.png"
            fig.write_image(img_path)
            img_paths.append(img_path)
            pdf.image(img_path, x=10, w=190)
            pdf.ln(5)
            
            # 2. Plateformes
            if "Plateformes" in filtered_df.columns:
                platform_series = filtered_df["Plateformes"].dropna().str.split(';')
                platform_flat = [item.strip() for sublist in platform_series for item in sublist]
                platform_counts = pd.Series(platform_flat).value_counts().reset_index()
                
                fig = px.pie(
                    platform_counts,
                    names='index',
                    values='count',
                    title="Plateformes o√π les DeepFakes sont vus"
                )
                img_path = "platforms.png"
                fig.write_image(img_path)
                img_paths.append(img_path)
                pdf.image(img_path, x=10, w=190)
                pdf.ln(5)
            
            # 3. Impact
            fig = px.bar(
                filtered_df["Impact soci√©t√©"].value_counts().reset_index(),
                x="Impact soci√©t√©",
                y="count",
                title="Impact per√ßu des DeepFakes"
            )
            img_path = "impact.png"
            fig.write_image(img_path)
            img_paths.append(img_path)
            pdf.image(img_path, x=10, w=190)
            
            # Nettoyage des images temporaires
            for path in img_paths:
                try:
                    os.remove(path)
                except:
                    pass
            
            # Conclusion
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, '3. Conclusion', 0, 1)
            pdf.set_font('Arial', '', 12)
            
            conclusion_text = """
            Cette analyse r√©v√®le plusieurs insights cl√©s sur la perception des DeepFakes :
            
            - Une bonne connaissance g√©n√©rale mais des niveaux de compr√©hension variables
            - Une exposition importante via certaines plateformes sociales
            - Un impact per√ßu comme majoritairement n√©gatif sur la soci√©t√©
            - Des diff√©rences significatives selon l'√¢ge et le genre
            
            Ces r√©sultats soulignent l'importance de :
            1. Sensibiliser davantage aux risques des DeepFakes
            2. D√©velopper des outils de d√©tection accessibles
            3. Renforcer l'√©ducation aux m√©dias
            """
            pdf.multi_cell(0, 10, conclusion_text)
            
        # Pied de page
        pdf.set_font('Arial', 'I', 8)
        pdf.cell(0, 10, f"Document g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 0, 'C')
        
        # Retourne le PDF sous forme de bytes
        return pdf.output(dest='S').encode('latin1')
    
    except Exception as e:
        st.error(f"Erreur g√©n√©ration rapport: {str(e)}")
        return None

# =============================================
# BOUTON DE TELECHARGEMENT DU RAPPORT
# =============================================
with tab1:
    if not filtered_df.empty:
        if st.button("üìÑ T√©l√©charger le rapport d'analyse (PDF)"):
            with st.spinner("G√©n√©ration du rapport en cours..."):
                report_bytes = generate_analysis_report(filtered_df)
                
                if report_bytes:
                    st.download_button(
                        label="‚¨áÔ∏è T√©l√©charger le rapport",
                        data=report_bytes,
                        file_name="rapport_analyse_deepfakes.pdf",
                        mime="application/pdf"
                    )