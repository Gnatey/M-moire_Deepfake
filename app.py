import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import os
from datetime import datetime
from scipy.stats import chi2_contingency
import plotly.graph_objects as go
from PIL import Image
import networkx as nx
import matplotlib.pyplot as plt
from PIL import Image
from fpdf import FPDF
import streamlit as st
import io
import kaleido
import uuid
import hashlib
import json
from google.oauth2.service_account import Credentials
import gspread
import statsmodels.api as sm
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics import (confusion_matrix, classification_report, roc_curve, roc_auc_score,precision_recall_curve)
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import plotly.graph_objects as go
from sklearn.utils import resample
import shap
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
from sklearn.preprocessing import MultiLabelBinarizer

# =============================================
# INITIALISATION ET CONFIGURATION DE BASE
# =============================================
st.set_page_config(
    page_title="Dashboard DeepFakes",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================
# FONCTIONS UTILITAIRES
# =============================================
def local_css(file_name):
    """Charge un fichier CSS personnalis√©"""
    try:
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    except FileNotFoundError:
        st.markdown("""
        <style>
            .stMetric { border-radius: 10px; padding: 15px; background-color: #f8f9fa; }
            .stMetric label { font-size: 0.9rem; color: #6c757d; }
            .stMetric div { font-size: 1.4rem; font-weight: bold; color: #212529; }
            .stPlotlyChart { border: 1px solid #e1e4e8; border-radius: 8px; }
        </style>
        """, unsafe_allow_html=True)

def calculate_cramers_v(contingency_table):
    """Calcule le coefficient Cramer's V pour les tableaux de contingence"""
    chi2 = chi2_contingency(contingency_table)[0]
    n = contingency_table.sum().sum()
    phi2 = chi2/n
    r, k = contingency_table.shape
    return np.sqrt(phi2/min((k-1),(r-1)))

def truncate_label(text, max_length=25):
    """Tronque les libell√©s trop longs pour la lisibilit√©"""
    return (text[:max_length] + '...') if len(str(text)) > max_length else str(text)

# =============================================
# CHARGEMENT DES DONN√âES
# =============================================
@st.cache_data
def load_data():
    """Charge et pr√©pare les donn√©es avec gestion des erreurs"""
    url = 'https://raw.githubusercontent.com/Gnatey/M-moire_Deepfake/refs/heads/main/DeepFakes.csv'
    try:
        df = pd.read_csv(url, sep=';', encoding='utf-8')
        
        # Nettoyage des noms de colonnes
        df.columns = df.columns.str.strip()
        
        # Renommage des colonnes longues
        column_rename = {
            "Quel est votre tranche d'√¢ge ?": "Tranche d'√¢ge",
            "Vous √™tes ...?": "Genre",
            "Avez-vous d√©j√† entendu parler des Deep Fakes ?": "Connaissance DeepFakes",
            "Avez-vous d√©j√† vu un Deep Fake sur les r√©seaux sociaux ?": "Exposition DeepFakes",
            "_Sur quelles plateformes avez-vous principalement vu des Deep Fakes ? (Plusieurs choix possibles)": "Plateformes",
            "Comment √©valueriez vous votre niveau de connaissance des Deep Fakes ?": "Niveau connaissance",
            "Faites-vous confiance aux informations que vous trouvez sur les r√©seaux sociaux ?": "Confiance r√©seaux sociaux",
            "Selon vous, quel est l‚Äôimpact global des Deep Fakes sur la soci√©t√© ?": "Impact soci√©t√©"
        }
        
        return df.rename(columns=column_rename)
    
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {str(e)}")
        return pd.DataFrame()

# Chargement initial
df = load_data()
local_css("style.css")

# =============================================
# SIDEBAR FILTRES
# =============================================
with st.sidebar:
    st.header("üéõÔ∏è Filtres Principaux")
    
    if not df.empty:
        # Filtres de base
        ages = df["Tranche d'√¢ge"].dropna().unique()
        genres = df["Genre"].dropna().unique()

        # Extraction et nettoyage des plateformes individuelles
        plateforme_series = df["Plateformes"].dropna().str.split(";")
        all_plateformes = sorted(set(p.strip() for sublist in plateforme_series for p in sublist if p.strip()))

        selected_ages = st.multiselect(
            "Tranches d'√¢ge :", 
            options=ages, 
            default=ages,
            help="S√©lectionnez les tranches d'√¢ge √† inclure"
        )
        
        selected_genres = st.multiselect(
            "Genres :", 
            options=genres, 
            default=genres,
            help="Filtrez les r√©sultats par genre"
        )

        selected_plateforme = st.multiselect(
            "Plateformes :", 
            options=all_plateformes,
            default=all_plateformes,
            help="Filtrez les r√©sultats par plateformes"
        )
        
    else:
        selected_ages = []
        selected_genres = []
        selected_plateforme = []

# Application des filtres
if not df.empty:
    # Filtrage √¢ge + genre
    filtered_df = df[
        (df["Tranche d'√¢ge"].isin(selected_ages)) &
        (df["Genre"].isin(selected_genres))
    ]

    # Filtrage plateformes (ligne contenant au moins une des plateformes s√©lectionn√©es)
    if selected_plateforme:
        mask_plateformes = df["Plateformes"].dropna().apply(
            lambda x: any(p.strip() in selected_plateforme for p in x.split(";"))
        )
        filtered_df = filtered_df[mask_plateformes]
else:
    filtered_df = pd.DataFrame()


# =============================================
# ONGLETS PRINCIPAUX
# =============================================
st.title("üìä Dashboard Analyse des DeepFakes")
tab1, tab2,tab3,tab4 = st.tabs(["üè† Analyse exploratoire (EDA)", "üî¨ Exploration Avanc√©e", "üìà Analyse Statistique & Machine Learning", "Personae"])

# =============================================
# ONGLET 1 - TABLEAU DE BORD PRINCIPAL
# =============================================
with tab1:
    if filtered_df.empty:
        st.warning("Aucune donn√©e disponible avec les filtres s√©lectionn√©s.")
    else:
        st.header("üîç Indicateurs Cl√©s")
        
        # M√©triques en colonnes
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_respondents = len(filtered_df)
            st.metric("Nombre de R√©pondants", total_respondents)
        
        with col2:
            aware_yes = filtered_df["Connaissance DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            st.metric("% Connaissance DeepFakes", f"{aware_yes:.1f}%")
        
        with col3:
            seen_yes = filtered_df["Exposition DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            st.metric("% Ayant vu un DeepFake", f"{seen_yes:.1f}%")
        
        with col4:
            trust_mean = filtered_df["Confiance r√©seaux sociaux"].apply(lambda x: 1 if x == 'Oui' else 0).mean() * 100
            st.metric("Confiance moyenne (r√©seaux)", f"{trust_mean:.1f}%")
        
        # Visualisations principales
        st.header("üìà Visualisations Cl√©s")
        
        # 1. Niveau de connaissance
        st.subheader("Niveau de Connaissance des DeepFakes")
        knowledge_counts = filtered_df["Niveau connaissance"].value_counts().reset_index()
        fig_knowledge = px.bar(
            knowledge_counts, 
            x="Niveau connaissance", 
            y="count", 
            text="count",
            color="Niveau connaissance",
            template="plotly_white"
        )
        st.plotly_chart(fig_knowledge, use_container_width=True)
        
        # 2. Plateformes de DeepFakes
        st.subheader("Plateformes o√π les DeepFakes sont vus")
        if "Plateformes" in filtered_df.columns:
            platform_series = filtered_df["Plateformes"].dropna().str.split(';')
            platform_flat = [item.strip() for sublist in platform_series for item in sublist]
            platform_counts = pd.Series(platform_flat).value_counts().reset_index()
            fig_platforms = px.pie(
            platform_counts, 
                names='index', 
                values='count',
                hole=0.3,
                labels={'index': 'Plateforme', 'count': 'Occurrences'},
                color_discrete_sequence=px.colors.qualitative.Alphabet
        )

            st.plotly_chart(fig_platforms, use_container_width=True)
        
        # 3. Impact per√ßu
        st.subheader("Impact per√ßu des DeepFakes")
        impact_counts = filtered_df["Impact soci√©t√©"].value_counts().reset_index()
        fig_impact = px.bar(
            impact_counts,
            x="Impact soci√©t√©",
            y="count",
            text="count",
            color="Impact soci√©t√©",
            color_discrete_sequence=px.colors.qualitative.D3
        )
        st.plotly_chart(fig_impact, use_container_width=True)
        
        # 4. Analyse crois√©e
        st.subheader("Analyse Crois√©e")
        
        # Confiance par tranche d'√¢ge
        st.markdown("**Confiance par Tranche d'√¢ge**")
        trust_age = filtered_df.groupby("Tranche d'√¢ge")["Confiance r√©seaux sociaux"].value_counts(normalize=True).unstack() * 100
        fig_trust_age = px.bar(
            trust_age,
            barmode="group",
            labels={'value': 'Pourcentage', 'variable': 'Confiance'},
            height=500,
            color_discrete_sequence=px.colors.qualitative.Plotly
        )
        st.plotly_chart(fig_trust_age, use_container_width=True)

                # 2. Distribution de l'impact per√ßu
        st.subheader("Distribution de l‚Äôimpact per√ßu")
        impact_order = ["Tr√®s n√©gatif", "N√©gatif", "Neutre", "Positif", "Tr√®s positif"]
        fig_impact_dist = px.histogram(
            filtered_df,
            x="Impact soci√©t√©",
            category_orders={"Impact soci√©t√©": impact_order},
            color="Impact soci√©t√©",
            labels={"Impact soci√©t√©": "Impact per√ßu"},
            title="Histogramme de l'impact per√ßu"
        )
        st.plotly_chart(fig_impact_dist, use_container_width=True)

        # 3. R√©partition par genre
        st.subheader("R√©partition par genre")
        genre_counts = filtered_df["Genre"].value_counts().reset_index()
        genre_counts.columns = ["Genre", "Count"]
        fig_genre = px.bar(
            genre_counts,
            x="Genre",
            y="Count",
            text="Count",
            title="Nombre de r√©pondants par genre"
        )
        st.plotly_chart(fig_genre, use_container_width=True)

        # 4. Boxplot : Impact vs Tranche d'√¢ge
        st.subheader("Impact per√ßu selon la tranche d‚Äô√¢ge")
        # encoder l‚Äôimpact pour le boxplot
        impact_map = {k: i for i, k in enumerate(impact_order)}
        df_box = filtered_df.copy()
        df_box["Impact_code"] = df_box["Impact soci√©t√©"].map(impact_map)
        fig_box = px.box(
            df_box,
            x="Tranche d'√¢ge",
            y="Impact_code",
            labels={"Impact_code": "Impact (cod√©)", "Tranche d'√¢ge": "√Çge"},
            title="Boxplot : Impact per√ßu par tranche d‚Äô√¢ge"
        )
        st.plotly_chart(fig_box, use_container_width=True)
        
        # =============================================
        # VISUALISATION GENRE VS PLATEFORMES (ONGLET 1)
        # =============================================
        st.header("üë• Genre vs Plateformes")
        
        if "Plateformes" in filtered_df.columns:
            # Expansion des plateformes
            platform_series = filtered_df[["Plateformes", "Genre"]].dropna()
            platform_series["Plateformes"] = platform_series["Plateformes"].str.split(';')
            platform_exploded = platform_series.explode("Plateformes").dropna()
            platform_exploded["Plateformes"] = platform_exploded["Plateformes"].str.strip()
            
            # Table de contingence
            cross_tab = pd.crosstab(
                platform_exploded["Genre"],
                platform_exploded["Plateformes"]
            )
            
            # Heatmap am√©lior√©e
            fig = px.imshow(
                cross_tab,
                text_auto=True,
                aspect="auto",
                color_continuous_scale='Blues',
                height=600
            )
            fig.update_layout(
                xaxis_title="Plateformes",
                yaxis_title="Genre",
                margin=dict(t=50, b=100)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("La colonne 'Plateformes' n'est pas disponible")

        # =============================================
        # MATRICE DE CORRELATION (ONGLET 1 SEULEMENT)
        # =============================================
        st.header("üîó Matrice de Corr√©lation")
        
        # S√©lection des colonnes pertinentes
        selected_cols = [
            "Connaissance DeepFakes",
            "Niveau connaissance", 
            "Confiance r√©seaux sociaux",
            "Impact soci√©t√©",
            "Tranche d'√¢ge",
            "Genre"
        ]
        
        # V√©rification que les colonnes existent
        if all(col in filtered_df.columns for col in selected_cols):
            df_corr = filtered_df[selected_cols].copy()
            
            # Conversion des cat√©gories en codes num√©riques
            for col in df_corr.columns:
                df_corr[col] = df_corr[col].astype('category').cat.codes
            
            # Calcul de la matrice de corr√©lation
            corr_matrix = df_corr.corr()
            
            # Labels courts pour les axes
            short_labels = {
                "Connaissance DeepFakes": "Connaissance DF",
                "Niveau connaissance": "Niveau Connaissance",
                "Confiance r√©seaux sociaux": "Confiance RS",
                "Impact soci√©t√©": "Impact Soci√©t√©",
                "Tranche d'√¢ge": "√Çge",
                "Genre": "Genre"
            }
            
            # Visualisation avec Plotly
            fig_corr = px.imshow(
                corr_matrix,
                text_auto=True,
                color_continuous_scale='RdBu',
                zmin=-1,
                zmax=1,
                labels=dict(color="Corr√©lation"),
                x=[short_labels.get(col, col) for col in corr_matrix.columns],
                y=[short_labels.get(col, col) for col in corr_matrix.index],
                aspect="auto",
                title="Matrice de Corr√©lation (Variables Pertinentes)"
            )
            
            fig_corr.update_layout(
                width=800,
                height=600,
                xaxis_tickangle=-45,
                font=dict(size=12),
                margin=dict(t=50, b=100)
            )
            
            st.plotly_chart(fig_corr, use_container_width=True)
        else:
            st.warning("Certaines colonnes n√©cessaires pour la matrice de corr√©lation sont manquantes")

# =============================================
# FONCTIONS POUR TELECHARGER L'ONGLET 1
# =============================================

def fig_to_image(fig):
    """Convertit une figure Plotly en image PNG"""
    try:
        img_bytes = fig.to_image(format="png", width=1200, height=800, scale=2)
        return Image.open(io.BytesIO(img_bytes))
    except Exception as e:
        st.error(f"Erreur conversion figure: {str(e)}")
        return None

def generate_dashboard_pdf(figures, titles):
    """G√©n√®re un PDF avec toutes les visualisations"""
    try:
        # Cr√©ation d'un buffer en m√©moire pour le PDF
        pdf_buffer = io.BytesIO()
        
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        
        # M√©tadonn√©es du PDF
        pdf.set_title("Dashboard DeepFakes")
        pdf.set_author("Streamlit App")
        
        # Titre principal
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Tableau de Bord DeepFakes - Onglet 1', 0, 1, 'C')
        pdf.ln(10)
        
        # Ajout des visualisations avec leurs titres
        for i, (fig, title) in enumerate(zip(figures, titles)):
            if fig is not None:
                # Ajout du titre de la section
                pdf.set_font('Arial', 'B', 12)
                pdf.multi_cell(0, 10, f"{i+1}. {title}")
                pdf.ln(5)
                
                # Sauvegarde temporaire de l'image
                img_path = f"temp_{uuid.uuid4()}.png"
                fig.save(img_path)
                
                # Ajout de l'image au PDF
                pdf.image(img_path, x=10, w=190)
                pdf.ln(10)
                
                # Suppression du fichier temporaire
                try:
                    os.remove(img_path)
                except:
                    pass
        
        # Pied de page
        pdf.set_font('Arial', 'I', 8)
        pdf.cell(0, 10, f"G√©n√©r√© le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, 'C')
        
        # √âcriture directe dans le buffer
        output_data = pdf.output(dest='S')
        if isinstance(output_data, (bytes, bytearray)):
            pdf_buffer.write(output_data)
        else:
            pdf_buffer.write(output_data.encode('latin1'))
            pdf_buffer.seek(0)
        
        return pdf_buffer.getvalue()
    
    except Exception as e:
        st.error(f"Erreur g√©n√©ration PDF: {str(e)}")
        return None

# =============================================
# TELECHARGER TOUT L'ONGLET 1 (IMPLEMENTATION FINALE)
# =============================================
with tab1:
    if not filtered_df.empty:
        # Titres des sections
        section_titles = [
            "Niveau de Connaissance des DeepFakes",
            "Plateformes o√π les DeepFakes sont vus",
            "Impact per√ßu des DeepFakes",
            "Confiance par Tranche d'√¢ge",
            "Genre vs Plateformes",
            "Matrice de Corr√©lation"
        ]
        
        # Figures correspondantes
        figures_to_export = [
            fig_knowledge,
            fig_platforms,
            fig_impact,
            fig_trust_age,
            fig,        # heatmap Genre x Plateformes
            fig_corr    # matrice de corr√©lation
        ]
        
        # V√©rification des figures disponibles
        available_figures = [f for f in figures_to_export if f is not None]
        
        if st.button("üì• T√©l√©charger le Tableau de Bord en PDF"):
            if len(available_figures) == 0:
                st.warning("Aucune visualisation disponible √† exporter")
            else:
                with st.spinner("G√©n√©ration du PDF en cours..."):
                    # Convertir les figures en images
                    images = []
                    for fig in available_figures:
                        img = fig_to_image(fig)
                        if img is not None:
                            images.append(img)
                    
                    if images:
                        # G√©n√©rer le PDF
                        pdf_bytes = generate_dashboard_pdf(images, section_titles[:len(images)])
                        
                        if pdf_bytes:
                            # Proposer le t√©l√©chargement
                            st.download_button(
                                label="‚¨áÔ∏è T√©l√©charger le PDF",
                                data=pdf_bytes,
                                file_name="dashboard_deepfakes.pdf",
                                mime="application/pdf",
                                key="download_pdf"
                            )

# =============================================
# ONGLET 2 - EXPLORATION AVANC√âE
# =============================================
with tab2:
    st.header("‚öñÔ∏è M√©thodologie & Validit√© Scientifique")
    
    # Section de configuration avanc√©e
    with st.expander("‚öôÔ∏è Param√®tres Avanc√©s", expanded=True):
        col_config1, col_config2, col_config3 = st.columns(3)
        
        # Colonnes cat√©gorielles disponibles
        categorical_columns = [col for col in df.select_dtypes(include='object').columns 
                             if df[col].nunique() <= 15 and col in df.columns]
        
        with col_config1:
            x_axis = st.selectbox(
                "Axe X (Cat√©gorie principale)", 
                options=categorical_columns, 
                index=categorical_columns.index("Connaissance DeepFakes") if "Connaissance DeepFakes" in categorical_columns else 0,
                help="Variable pour l'axe horizontal"
            )
        
        with col_config2:
            y_axis = st.selectbox(
                "Axe Y (Sous-cat√©gorie)", 
                options=categorical_columns, 
                index=categorical_columns.index("Exposition DeepFakes") if "Exposition DeepFakes" in categorical_columns else 1,
                help="Variable pour segmenter les donn√©es"
            )
        
        with col_config3:
            color_by = st.selectbox(
                "Couleur (D√©tail)", 
                options=categorical_columns, 
                index=categorical_columns.index("Genre") if "Genre" in categorical_columns else 2,
                help="Variable pour le codage couleur"
            )
        
        # Options suppl√©mentaires
        st.markdown("---")
        col_opt1, col_opt2, col_opt3 = st.columns(3)
        
        with col_opt1:
            chart_type = st.selectbox(
                "Type de visualisation :",
                options=["Barres", "Sunburst", "Treemap", "Heatmap", "R√©seau"],
                index=0,
                help="Choisissez le type de graphique"
            )
            
        with col_opt2:
            show_percentage = st.checkbox(
                "Afficher les pourcentages", 
                True,
                help="Convertir les counts en pourcentages"
            )
            
        with col_opt3:
            min_count = st.slider(
                "Filtre count minimum", 
                min_value=1, 
                max_value=50, 
                value=5,
                help="Exclure les cat√©gories trop petites"
            )
    
    # Pr√©paration des donn√©es
    if not filtered_df.empty:
        filtered_data = filtered_df[[x_axis, y_axis, color_by]].dropna()
        cross_data = filtered_data.groupby([x_axis, y_axis, color_by]).size().reset_index(name='Count')
        
        # Application du filtre minimum
        cross_data = cross_data[cross_data['Count'] >= min_count]
        
        # Conversion en pourcentages si demand√©
        if show_percentage:
            total = cross_data['Count'].sum()
            cross_data['Count'] = (cross_data['Count'] / total * 100).round(1)
    
    # Section d'analyse statistique
    with st.expander("üìä Analyse Statistique", expanded=False):
        if not filtered_df.empty:
            contingency_table = pd.crosstab(filtered_df[x_axis], filtered_df[y_axis])
            
            if contingency_table.size > 0:
                chi2, p, dof, expected = chi2_contingency(contingency_table)
                cramers_v = calculate_cramers_v(contingency_table)
                
                st.markdown(f"""
                **Test du Chi2 d'ind√©pendance**
                - p-value = `{p:.4f}`  
                - Degr√©s de libert√© = `{dof}`  
                - Significatif √† 5%? `{"‚úÖ Oui" if p < 0.05 else "‚ùå Non"}`  
                - Coefficient Cramer's V = `{cramers_v:.3f}`
                """)
            else:
                st.warning("Table de contingence trop petite pour l'analyse")
        else:
            st.warning("Aucune donn√©e disponible pour l'analyse")
    
    # Visualisation dynamique
    if not filtered_df.empty:
        with st.spinner("G√©n√©ration de la visualisation..."):
            try:
                if chart_type == "Barres":
                    # Pr√©paration des libell√©s
                    cross_data[x_axis] = cross_data[x_axis].apply(truncate_label)
                    cross_data[y_axis] = cross_data[y_axis].apply(truncate_label)
                    cross_data[color_by] = cross_data[color_by].apply(truncate_label)
                    
                    fig = px.bar(
                        cross_data,
                        x=x_axis,
                        y='Count',
                        color=color_by,
                        barmode='group',
                        text='Count',
                        facet_col=y_axis,
                        title=f"<b>{x_axis} vs {y_axis} par {color_by}</b>",
                        labels={'Count': "Nombre" if not show_percentage else "Pourcentage"},
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    
                    fig.update_layout(
                        height=600,
                        width=max(800, len(cross_data)*20),
                        xaxis_tickangle=-45,
                        yaxis_title="Nombre" if not show_percentage else "Pourcentage (%)",
                        legend_title=color_by,
                        margin=dict(t=100)
                    )
                    
                    fig.update_traces(
                        textposition='outside',
                        texttemplate='%{text}' + ('%' if show_percentage else '')
                    )
                
                elif chart_type == "Sunburst":
                    fig = px.sunburst(
                        cross_data,
                        path=[x_axis, y_axis, color_by],
                        values='Count',
                        title=f"<b>Hi√©rarchie: {x_axis} > {y_axis} > {color_by}</b>",
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    
                    fig.update_traces(
                        textinfo="label+percent parent",
                        hovertemplate="<b>%{label}</b><br>" + 
                                     ("Count: %{value}<br>" if not show_percentage else "Pourcentage: %{value}%<br>") + 
                                     "%{percentParent:.1%} of parent"
                    )
                
                elif chart_type == "Treemap":
                    fig = px.treemap(
                        cross_data,
                        path=[x_axis, y_axis, color_by],
                        values='Count',
                        title=f"<b>R√©partition: {x_axis} > {y_axis} > {color_by}</b>",
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    
                    fig.update_traces(
                        textinfo="label+value+percent parent",
                        texttemplate="<b>%{label}</b><br>" + 
                                    ("%{value}" if not show_percentage else "%{value}%") + 
                                    "<br>%{percentParent:.1%}"
                    )
                
                elif chart_type == "Heatmap":
                    pivot_data = cross_data.pivot_table(
                        index=x_axis,
                        columns=y_axis,
                        values='Count',
                        aggfunc='sum',
                        fill_value=0
                    )
                    
                    fig = px.imshow(
                        pivot_data,
                        labels=dict(x=y_axis, y=x_axis, color="Count"),
                        title=f"<b>Heatmap: {x_axis} vs {y_axis}</b>",
                        aspect="auto",
                        color_continuous_scale='Blues',
                        text_auto=True
                    )
                
                elif chart_type == "R√©seau":
                    # Cr√©ation du graphique r√©seau
                    G = nx.from_pandas_edgelist(
                        cross_data, 
                        source=x_axis, 
                        target=y_axis, 
                        edge_attr='Count'
                    )
                    
                    pos = nx.spring_layout(G)
                    edge_x = []
                    edge_y = []
                    for edge in G.edges():
                        x0, y0 = pos[edge[0]]
                        x1, y1 = pos[edge[1]]
                        edge_x.extend([x0, x1, None])
                        edge_y.extend([y0, y1, None])
                    
                    edge_trace = go.Scatter(
                        x=edge_x, y=edge_y,
                        line=dict(width=0.5, color='#888'),
                        hoverinfo='none',
                        mode='lines'
                    )
                    
                    node_x = []
                    node_y = []
                    for node in G.nodes():
                        x, y = pos[node]
                        node_x.append(x)
                        node_y.append(y)
                    
                    node_trace = go.Scatter(
                        x=node_x, y=node_y,
                        mode='markers+text',
                        hoverinfo='text',
                        marker=dict(
                            showscale=True,
                            colorscale='YlGnBu',
                            size=10,
                            colorbar=dict(
                                thickness=15,
                                title='Connections',
                                xanchor='left',
                                titleside='right'
                            )
                        )
                    )
                    
                    fig = go.Figure(
                        data=[edge_trace, node_trace],
                        layout=go.Layout(
                            title=f'<br>R√©seau: {x_axis} ‚Üî {y_axis}',
                            showlegend=False,
                            hovermode='closest',
                            margin=dict(b=20,l=5,r=5,t=40),
                            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
                        )
                    )
                
                # Affichage du graphique
                st.plotly_chart(fig, use_container_width=True)
                pdf_buffer = io.BytesIO()
                fig.write_image(pdf_buffer, format="pdf")
                pdf_buffer.seek(0)
                
                # Options d'export
                st.markdown("---")
                col_export1, col_export2 = st.columns(2)
                
                with col_export1:
                    st.download_button(
                        label="üíæ T√©l√©charger le graphique en PDF",
                        data=pdf_buffer,
                        file_name="graphique_plotly.pdf",
                        mime="application/pdf"
                    )

                
                with col_export2:
                    st.download_button(
                        label="üìÑ T√©l√©charger les donn√©es",
                        data=cross_data.to_csv(index=False),
                        file_name="donnees_croisees.csv",
                        mime="text/csv"
                    )
                
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration du graphique : {str(e)}")
                st.warning("Veuillez s√©lectionner des combinaisons de variables compatibles")



    # =============================================
    # SECTION 1 : DESCRIPTION DE L'√âCHANTILLON
    # =============================================
    with st.expander("üìä Caract√©ristiques de l'√©chantillon", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("<div class='metric-card'>üìè <b>Taille</b><br>"
                        f"<span style='font-size:24px'>{len(df)} r√©pondants</span></div>", 
                        unsafe_allow_html=True)
            
        with col2:
            mode_recrutement = "Volontariat en ligne"
            st.markdown("<div class='metric-card'>üéØ <b>Recrutement</b><br>"
                        f"<span style='font-size:16px'>{mode_recrutement}</span></div>", 
                        unsafe_allow_html=True)
            
        with col3:
            duree_enquete = (pd.to_datetime(df['Date de saisie']).max() - 
                            pd.to_datetime(df['Date de saisie']).min()).days +1
            st.markdown("<div class='metric-card'>‚è± <b>Dur√©e</b><br>"
                        f"<span style='font-size:24px'>{duree_enquete} jours</span></div>", 
                        unsafe_allow_html=True)

        # Distribution d√©mographique
        st.subheader("R√©partition d√©mographique")
        demo_col1, demo_col2 = st.columns(2)
        
        with demo_col1:
            fig_age = px.pie(df, names="Tranche d'√¢ge", title="Distribution par √¢ge",
                            color_discrete_sequence=px.colors.sequential.RdBu)
            st.plotly_chart(fig_age, use_container_width=True)
            
        with demo_col2:
            fig_genre = px.pie(df, names="Genre", title="R√©partition par genre",
                              color_discrete_sequence=px.colors.qualitative.Pastel)
            st.plotly_chart(fig_genre, use_container_width=True)

    # =============================================
    # SECTION 2 : REPR√âSENTATIVIT√â
    # =============================================
    with st.expander("üßÆ Analyse de repr√©sentativit√©", expanded=True):
        st.subheader("Test de repr√©sentativit√©")
        
        # Charger les donn√©es INSEE (exemple simplifi√©)
        insee_data = {
            "Tranche d'√¢ge": ["18-25", "26-40", "41-60", "60+"],
            "Population (%)": [22, 35, 30, 13]
        }
        df_insee = pd.DataFrame(insee_data)
        
        # Calcul des √©carts
        df_compare = df["Tranche d'√¢ge"].value_counts(normalize=True).reset_index()
        df_compare.columns = ["Tranche d'√¢ge", "√âchantillon (%)"]
        df_compare = df_compare.merge(df_insee, on="Tranche d'√¢ge", how="left")
        df_compare["√âcart (%)"] = df_compare["√âchantillon (%)"] - df_compare["Population (%)"]
        
        # Visualisation comparative
        fig_comp = go.Figure()
        fig_comp.add_trace(go.Bar(
            x=df_compare["Tranche d'√¢ge"],
            y=df_compare["√âchantillon (%)"],
            name='Notre √©chantillon',
            marker_color='#1f77b4'
        ))
        fig_comp.add_trace(go.Bar(
            x=df_compare["Tranche d'√¢ge"],
            y=df_compare["Population (%)"],
            name='Population INSEE',
            marker_color='#ff7f0e'
        ))
        fig_comp.update_layout(barmode='group', title="Comparaison avec les donn√©es INSEE")
        st.plotly_chart(fig_comp, use_container_width=True)
        
        # Test du Chi2
        st.markdown("**Test d'ad√©quation du Chi¬≤**")
        from scipy.stats import chisquare
        observed = df_compare["√âchantillon (%)"].values * len(df) / 100
        expected = df_compare["Population (%)"].values * len(df) / 100
        chi2, p = chisquare(f_obs=observed, f_exp=expected)
        
        st.markdown(f"""
        <div class='stat-test'>
        œá¬≤ = {chi2:.3f}<br>
        p-value = {p:.4f}<br>
        <b>Conclusion</b> : {"L'√©chantillon est repr√©sentatif" if p > 0.05 else "Biais de repr√©sentativit√© d√©tect√©"}
        </div>
        """, unsafe_allow_html=True)

    # =============================================
    # SECTION 3 : INTERVALLES DE CONFIANCE
    # =============================================
    with st.expander("üì∂ Pr√©cision des estimations", expanded=True):
        st.subheader("Intervalles de confiance (bootstrap)")
        
        # Param√®tres
        col_var, col_level = st.columns(2)
        with col_var:
            target_var = st.selectbox("Variable d'int√©r√™t", 
                                    ["Connaissance DeepFakes", "Exposition DeepFakes"])
        with col_level:
            conf_level = st.slider("Niveau de confiance", 90, 99, 95)
        
        # Bootstrap
        def bootstrap_ci(data, n_bootstrap=1000):
            means = []
            for _ in range(n_bootstrap):
                sample = np.random.choice(data, size=len(data), replace=True)
                means.append(np.mean(sample == "Oui"))
            return np.percentile(means, [(100-conf_level)/2, 100-(100-conf_level)/2])
        
        ci_low, ci_high = bootstrap_ci(df[target_var])
        true_prop = (df[target_var] == "Oui").mean()
        
        # Visualisation
        fig_ci = go.Figure()
        fig_ci.add_trace(go.Indicator(
            mode="number+gauge",
            value=true_prop * 100,
            number={"suffix": "%"},
            domain={"x": [0.1, 1], "y": [0, 1]},
            gauge={
                "shape": "bullet",
                "axis": {"range": [0, 100]},
                "threshold": {
                    "line": {"color": "red", "width": 2},
                    "thickness": 0.75,
                    "value": true_prop * 100},
                "steps": [
                    {"range": [0, ci_low*100], "color": "lightgray"},
                    {"range": [ci_low*100, ci_high*100], "color": "gray"}],
                "bar": {"color": "black"}
            }))
        fig_ci.update_layout(title=f"Intervalle de confiance {conf_level}% pour {target_var}")
        st.plotly_chart(fig_ci, use_container_width=True)
        
        st.markdown(f"""
        La proportion r√©elle est de **{true_prop*100:.1f}%**  
        Intervalle de confiance : **[{ci_low*100:.1f}% - {ci_high*100:.1f}%]**
        """)

    # =============================================
    # SECTION 4 : ANALYSE DES BIAIS
    # =============================================
    with st.expander("‚ö†Ô∏è Diagnostic des biais", expanded=True):
        st.subheader("Carte des biais potentiels")

        biases = {
            "Biais de s√©lection": {
                "Description": "Sur-repr√©sentation des internautes avertis",
                "Impact": "Mod√©r√©",
                "Correctif": "Pond√©ration par calage"
            },
            "Biais de non-r√©ponse": {
                "Description": "Abandon apr√®s visualisation des questions complexes",
                "Impact": "Faible",
                "Correctif": "Analyse des r√©pondants partiels"
            },
            "Biais de d√©sirabilit√©": {
                "Description": "Sous-d√©claration des comportements risqu√©s",
                "Impact": "√âlev√©",
                "Correctif": "Donn√©es anonymis√©es"
            }
        }

        # Matrice d'√©valuation
        df_biases = pd.DataFrame(biases).T.reset_index()
        df_biases.columns = ["Type de biais", "Description", "Impact", "Correctif"]

        # Appliquer des attributs HTML personnalis√©s pour la colonne 'Impact'
        def add_data_attr(val):
            return f'data-impact="{val}"'

        styled_biases = df_biases.style.set_td_classes(
            df_biases[['Impact']].applymap(add_data_attr)
        )

        st.dataframe(
            styled_biases,
            hide_index=True,
            use_container_width=True
        )

        # Diagramme radar des risques

        fig_radar = go.Figure()
        fig_radar.add_trace(go.Scatterpolar(
            r=[3, 2, 1],  # Scores d'impact fictifs
            theta=list(biases.keys()),
            fill='toself',
            name='Impact des biais'
        ))
        fig_radar.update_layout(
            polar=dict(
                bgcolor="#ffffff",
                radialaxis=dict(
                    visible=True,
                    range=[0, 4],
                    color="#2c3e50",
                    gridcolor="#d0d0d0",
                    linecolor="#999999"
                ),
                angularaxis=dict(
                    color="white",
                    gridcolor="#d0d0d0",
                    linecolor="#999999"
                )
            ),
            font=dict(color="#2c3e50"),
            title=dict(
                text="Cartographie des biais par niveau d'impact",
                font=dict(color="white", size=20)
            )
        )

        st.plotly_chart(fig_radar, use_container_width=True)

    # =============================================
    # SECTION 5 : CONCLUSION M√âTHODOLOGIQUE
    # =============================================
    with st.container(border=True):
        st.subheader("üîé Conclusion sur la validit√©")
        
        # Score global de validit√©
        validity_score = 78  # Exemple de calcul composite
        
        st.markdown(f"""
            <div style="
            background-color: #ffffff10;
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 10px rgba(0,0,0,0.15);
            color: #ecf0f1;
                            ">
            <h3 style="color: #ecf0f1;">Validit√© scientifique globale : {validity_score}/100</h3>
        <div style="margin-top: 10px; font-size: 0.95rem;">
            <p><b>Points forts :</b> Taille suffisante (n>={len(df)}), IC serr√©s, tests significatifs</p>
            <p><b>Limites :</b> Biais de s√©lection, couverture g√©ographique limit√©e</p>
            <p><b>G√©n√©ralisation :</b> Possible avec pond√©ration pour les √©tudes descriptives</p>
        </div>
</div>
""", unsafe_allow_html=True)

# =============================================
# ONGLET 3 - MACHINE LEARNING
# =============================================

with tab3:
    st.header("ü§ñ Machine Learning : Pr√©dire le Comportement face aux DeepFakes")
    
    # Introduction p√©dagogique
    st.markdown("""
    ### üéØ **Objectif Simple**
    Nous allons **pr√©dire** qui a d√©j√† vu un DeepFake en analysant le profil des utilisateurs.
    Avec **{} observations**, nous pouvons cr√©er un mod√®le pr√©dictif efficace !
    """.format(len(filtered_df) if not filtered_df.empty else 0))
    
    if filtered_df.empty:
        st.warning("‚ö†Ô∏è Aucune donn√©e disponible - Ajustez les filtres dans la sidebar")
        st.stop()
    
    # =============================================
    # √âTAPE 1: CHOIX DE LA CIBLE (SIMPLIFI√â)
    # =============================================
    
    st.markdown("### üìä **√âtape 1 : Que voulons-nous pr√©dire ?**")
    
    # Options de pr√©diction simplifi√©es
    prediction_options = {
        "Exposition DeepFakes": {
            "question": "Qui a d√©j√† vu un DeepFake ?",
            "why": "Identifier les profils les plus expos√©s pour cibler les campagnes de sensibilisation"
        },
        "Connaissance DeepFakes": {
            "question": "Qui conna√Æt les DeepFakes ?", 
            "why": "Comprendre qui est inform√© sur cette technologie"
        },
        "Confiance r√©seaux sociaux": {
            "question": "Qui fait confiance aux r√©seaux sociaux ?",
            "why": "Identifier les utilisateurs les plus vuln√©rables √† la d√©sinformation"
        }
    }
    
    col_choice, col_info = st.columns([1, 2])
    
    with col_choice:
        target_var = st.selectbox(
            "üéØ **Choisissez votre pr√©diction :**",
            options=list(prediction_options.keys()),
            format_func=lambda x: prediction_options[x]["question"]
        )
    
    with col_info:
        st.info(f"**Pourquoi cette pr√©diction ?**\n{prediction_options[target_var]['why']}")
    
    # V√©rification des donn√©es
    if target_var not in filtered_df.columns:
        st.error(f"‚ùå La colonne '{target_var}' n'existe pas dans vos donn√©es")
        st.stop()
    
    # =============================================
    # √âTAPE 2: ANALYSE DES DONN√âES CIBLES
    # =============================================
    
    st.markdown("### üìà **√âtape 2 : Analyse de nos donn√©es**")
    
    # Nettoyage et pr√©paration
    target_data = filtered_df[target_var].dropna()
    
    if len(target_data) < 30:
        st.error("‚ùå Pas assez de donn√©es (minimum 30 observations n√©cessaires)")
        st.stop()
    
    # Visualisation de la distribution
    col_dist, col_stats = st.columns([2, 1])
    
    with col_dist:
        target_counts = target_data.value_counts()
        fig_target = px.pie(
            values=target_counts.values,
            names=target_counts.index,
            title=f"üéØ Distribution de '{target_var}'",
            color_discrete_sequence=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4']
        )
        st.plotly_chart(fig_target, use_container_width=True)
    
    with col_stats:
        st.markdown("**üìä Statistiques :**")
        for classe, count in target_counts.items():
            pct = (count / len(target_data)) * 100
            st.metric(f"Classe '{classe}'", f"{count} ({pct:.1f}%)")
        
        # V√©rification √©quilibre
        min_class_pct = target_counts.min() / len(target_data) * 100
        if min_class_pct < 20:
            st.warning(f"‚ö†Ô∏è Classes d√©s√©quilibr√©es (min: {min_class_pct:.1f}%)")
        else:
            st.success("‚úÖ Classes √©quilibr√©es")
    
    # =============================================
    # √âTAPE 3: PR√âPARATION AUTOMATIQUE DES DONN√âES
    # =============================================
    
    def prepare_smart_dataset(df, target):
        """Pr√©paration intelligente des donn√©es pour petit dataset"""
        
        st.markdown("### üîß **√âtape 3 : Pr√©paration automatique des donn√©es**")
        
        # √âtapes de nettoyage
        with st.expander("üîç Voir les d√©tails du nettoyage", expanded=False):
            st.write("**1. S√©lection des variables pertinentes**")
            
            # Variables √† garder (les plus importantes pour DeepFakes)
            keep_cols = [
                "Tranche d'√¢ge", "Genre", "Connaissance DeepFakes", 
                "Exposition DeepFakes", "Niveau connaissance",
                "Confiance r√©seaux sociaux", "Impact soci√©t√©"
            ]
            
            # Garder seulement les colonnes qui existent
            available_cols = [col for col in keep_cols if col in df.columns and col != target]
            
            st.write(f"Variables s√©lectionn√©es : {available_cols}")
            
            # Cr√©ation du dataset
            ml_data = df[available_cols + [target]].copy()
            initial_size = len(ml_data)
            
            st.write(f"**2. Nettoyage des valeurs manquantes**")
            st.write(f"Taille initiale : {initial_size} observations")
            
            # Supprimer les lignes avec target manquant
            ml_data = ml_data.dropna(subset=[target])
            st.write(f"Apr√®s suppression target manquante : {len(ml_data)} observations")
            
            # Pour les autres colonnes, remplacer par le mode
            for col in available_cols:
                if ml_data[col].isnull().sum() > 0:
                    mode_val = ml_data[col].mode()[0] if len(ml_data[col].mode()) > 0 else "Inconnu"
                    ml_data[col] = ml_data[col].fillna(mode_val)
                    st.write(f"Colonne '{col}': {ml_data[col].isnull().sum()} valeurs manquantes remplac√©es")
            
            st.write(f"**3. R√©sultat final : {len(ml_data)} observations pr√™tes pour l'analyse**")
        
        return ml_data, available_cols
    
    # Pr√©paration des donn√©es
    ml_data, feature_cols = prepare_smart_dataset(filtered_df, target_var)
    
    if len(ml_data) < 20:
        st.error(f"‚ùå Dataset trop petit apr√®s nettoyage : {len(ml_data)} observations")
        st.stop()
    
    # =============================================
    # √âTAPE 4: MOD√àLES OPTIMIS√âS POUR PETIT DATASET
    # =============================================
    
    st.markdown("### üöÄ **√âtape 4 : Entra√Ænement des mod√®les**")
    
    # S√©lection des mod√®les adapt√©s aux petits datasets
    st.markdown("**Mod√®les s√©lectionn√©s** (optimis√©s pour {} observations) :".format(len(ml_data)))
    
    col_m1, col_m2, col_m3 = st.columns(3)
    with col_m1:
        st.info("**üéØ R√©gression Logistique**\nSimple et efficace")
    with col_m2:
        st.info("**üå≥ Random Forest**\nG√®re bien les interactions")
    with col_m3:
        st.info("**üîç SVM**\nTrouve les fronti√®res complexes")
    
    if st.button("üöÄ **LANCER L'ANALYSE COMPL√àTE**", type="primary"):
        
        # Pr√©paration train/test
        X = ml_data[feature_cols]
        y = ml_data[target_var]
        
        # Encodage des variables cat√©gorielles
        from sklearn.preprocessing import LabelEncoder
        
        # Sauvegarde des encodeurs pour l'interpr√©tation
        encoders = {}
        X_encoded = X.copy()
        
        for col in X.columns:
            if X[col].dtype == 'object':
                le = LabelEncoder()
                X_encoded[col] = le.fit_transform(X[col])
                encoders[col] = le
        
        # Encodage de la target si n√©cessaire
        y_encoded = y
        target_encoder = None
        if y.dtype == 'object':
            target_encoder = LabelEncoder()
            y_encoded = target_encoder.fit_transform(y)
        
        # Split optimis√© pour petit dataset (70/30)
        X_train, X_test, y_train, y_test = train_test_split(
            X_encoded, y_encoded, test_size=0.3, random_state=42, stratify=y_encoded
        )
        
        st.success(f"‚úÖ Donn√©es pr√©par√©es : {len(X_train)} pour entra√Ænement, {len(X_test)} pour test")
        
        # =============================================
        # MOD√àLES OPTIMIS√âS
        # =============================================
        
        from sklearn.linear_model import LogisticRegression
        from sklearn.ensemble import RandomForestClassifier
        from sklearn.svm import SVC
        from sklearn.metrics import accuracy_score, classification_report, roc_auc_score, roc_curve
        from sklearn.preprocessing import StandardScaler
        
        # Standardisation (importante pour SVM et LogReg)
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        
        # D√©finition des mod√®les optimis√©s
        models = {
            "R√©gression Logistique": LogisticRegression(
                random_state=42, 
                max_iter=1000,
                C=0.1,  # R√©gularisation plus forte pour √©viter l'overfitting
                solver='liblinear'
            ),
            "Random Forest": RandomForestClassifier(
                n_estimators=50,  # Moins d'arbres pour √©viter l'overfitting
                max_depth=5,      # Profondeur limit√©e
                min_samples_split=10,  # Plus conservateur
                random_state=42
            ),
            "SVM": SVC(
                probability=True,
                random_state=42,
                C=0.5,  # R√©gularisation
                kernel='rbf'
            )
        }
        
        # =============================================
        # ENTRA√éNEMENT ET √âVALUATION
        # =============================================
        
        results = {}
        
        progress_bar = st.progress(0)
        for i, (name, model) in enumerate(models.items()):
            
            progress_bar.progress((i + 1) / len(models))
            
            try:
                # Choix des donn√©es (scaled pour LogReg et SVM)
                if name in ["R√©gression Logistique", "SVM"]:
                    X_train_model, X_test_model = X_train_scaled, X_test_scaled
                else:
                    X_train_model, X_test_model = X_train, X_test
                
                # Entra√Ænement
                model.fit(X_train_model, y_train)
                
                # Pr√©dictions
                y_pred = model.predict(X_test_model)
                y_pred_proba = model.predict_proba(X_test_model)
                
                # M√©triques
                accuracy = accuracy_score(y_test, y_pred)
                
                # AUC pour binaire uniquement
                auc = None
                if len(np.unique(y_encoded)) == 2:
                    auc = roc_auc_score(y_test, y_pred_proba[:, 1])
                
                results[name] = {
                    'model': model,
                    'accuracy': accuracy,
                    'auc': auc,
                    'y_pred': y_pred,
                    'y_pred_proba': y_pred_proba,
                    'X_test': X_test_model
                }
                
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erreur avec {name}: {str(e)}")
        
        # =============================================
        # VISUALISATION DES R√âSULTATS
        # =============================================
        
        st.markdown("### üèÜ **R√©sultats de Performance**")
        
        if results:
            # Tableau de r√©sultats
            perf_data = []
            for name, metrics in results.items():
                perf_data.append({
                    'Mod√®le': name,
                    'Accuracy': f"{metrics['accuracy']:.1%}",
                    'AUC': f"{metrics['auc']:.3f}" if metrics['auc'] else "N/A"
                })
            
            perf_df = pd.DataFrame(perf_data)
            
            # Affichage avec style
            col_table, col_best = st.columns([2, 1])
            
            with col_table:
                st.dataframe(
                    perf_df,
                    hide_index=True,
                    use_container_width=True
                )
            
            with col_best:
                best_model_name = max(results.keys(), key=lambda x: results[x]['accuracy'])
                best_accuracy = results[best_model_name]['accuracy']
                
                if best_accuracy >= 0.85:
                    st.success(f"üéâ **Objectif atteint !**\n{best_model_name}\n**{best_accuracy:.1%}**")
                elif best_accuracy >= 0.75:
                    st.info(f"üëç **Bonne performance**\n{best_model_name}\n**{best_accuracy:.1%}**")
                else:
                    st.warning(f"üìà **Performance mod√©r√©e**\n{best_model_name}\n**{best_accuracy:.1%}**")
            
            # =============================================
            # COURBE ROC (SI BINAIRE)
            # =============================================
            
            if len(np.unique(y_encoded)) == 2:
                st.markdown("### üìä **Courbe ROC : Qualit√© de Discrimination**")
                
                fig_roc = go.Figure()
                
                # Ligne de r√©f√©rence
                fig_roc.add_trace(go.Scatter(
                    x=[0, 1], y=[0, 1],
                    mode='lines',
                    line=dict(dash='dash', color='gray'),
                    name='Hasard (AUC = 0.5)',
                    hovertemplate='Ligne de hasard<extra></extra>'
                ))
                
                # Courbes pour chaque mod√®le
                colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']
                for i, (name, metrics) in enumerate(results.items()):
                    if metrics['auc']:
                        fpr, tpr, _ = roc_curve(y_test, metrics['y_pred_proba'][:, 1])
                        
                        fig_roc.add_trace(go.Scatter(
                            x=fpr, y=tpr,
                            mode='lines',
                            line=dict(color=colors[i], width=3),
                            name=f"{name} (AUC = {metrics['auc']:.3f})",
                            hovertemplate=f'{name}<br>FPR: %{{x:.3f}}<br>TPR: %{{y:.3f}}<extra></extra>'
                        ))
                
                fig_roc.update_layout(
                    title="Courbe ROC - Capacit√© √† distinguer les classes",
                    xaxis_title="Taux de Faux Positifs (FPR)",
                    yaxis_title="Taux de Vrais Positifs (TPR)",
                    width=700,
                    height=500,
                    hovermode='closest'
                )
                
                st.plotly_chart(fig_roc, use_container_width=True)
                
                st.info("üí° **Interpr√©tation** : Plus la courbe est proche du coin sup√©rieur gauche, meilleur est le mod√®le !")
            
            # =============================================
            # COURBES D'APPRENTISSAGE
            # =============================================
            
            st.markdown("### üìà **Courbes d'Apprentissage : √âviter le Surapprentissage**")
            
            from sklearn.model_selection import learning_curve
            
            # Prendre le meilleur mod√®le
            best_model = results[best_model_name]['model']
            
            # Donn√©es pour le meilleur mod√®le
            if best_model_name in ["R√©gression Logistique", "SVM"]:
                X_for_learning = X_encoded
                X_for_learning = scaler.fit_transform(X_for_learning)
            else:
                X_for_learning = X_encoded
            
            # Calcul des courbes d'apprentissage
            train_sizes, train_scores, val_scores = learning_curve(
                best_model, X_for_learning, y_encoded,
                train_sizes=np.linspace(0.3, 1.0, 5),
                cv=3,  # 3-fold CV pour petit dataset
                scoring='accuracy',
                random_state=42
            )
            
            # Moyennes et √©cart-types
            train_mean = train_scores.mean(axis=1)
            train_std = train_scores.std(axis=1)
            val_mean = val_scores.mean(axis=1)
            val_std = val_scores.std(axis=1)
            
            # Visualisation
            fig_learning = go.Figure()
            
            # Courbe d'entra√Ænement
            fig_learning.add_trace(go.Scatter(
                x=train_sizes,
                y=train_mean,
                mode='lines+markers',
                name='Score Entra√Ænement',
                line=dict(color='#FF6B6B', width=3),
                error_y=dict(
                    type='data',
                    array=train_std,
                    visible=True
                )
            ))
            
            # Courbe de validation
            fig_learning.add_trace(go.Scatter(
                x=train_sizes,
                y=val_mean,
                mode='lines+markers',
                name='Score Validation',
                line=dict(color='#4ECDC4', width=3),
                error_y=dict(
                    type='data',
                    array=val_std,
                    visible=True
                )
            ))
            
            fig_learning.update_layout(
                title=f"Courbes d'Apprentissage - {best_model_name}",
                xaxis_title="Nombre d'√©chantillons d'entra√Ænement",
                yaxis_title="Score d'Accuracy",
                yaxis=dict(range=[0, 1]),
                height=500
            )
            
            st.plotly_chart(fig_learning, use_container_width=True)
            
            # Diagnostic
            final_gap = train_mean[-1] - val_mean[-1]
            if final_gap < 0.05:
                st.success("‚úÖ **Bon √©quilibre** : Pas de surapprentissage d√©tect√©")
            elif final_gap < 0.15:
                st.warning("‚ö†Ô∏è **Surapprentissage mod√©r√©** : Le mod√®le pourrait √™tre simplifi√©")
            else:
                st.error("‚ùå **Surapprentissage important** : Le mod√®le m√©morise trop les donn√©es")
            
            # =============================================
            # ANALYSE D'EXPLICABILIT√â ROBUSTE
            # =============================================
            
            st.markdown("### üß† **Explicabilit√© du Mod√®le : Pourquoi ces pr√©dictions ?**")
            
            # Analyse de l'importance des variables
            if best_model_name == "Random Forest":
                rf_model = results[best_model_name]['model']
                importances = rf_model.feature_importances_
                
                # Feature importance avec statistiques
                feature_importance_df = pd.DataFrame({
                    'Variable': feature_cols,
                    'Importance': importances,
                    'Pourcentage': (importances / importances.sum()) * 100
                }).sort_values('Importance', ascending=True)
                
                # Visualisation principale
                fig_importance = px.bar(
                    feature_importance_df,
                    x='Importance',
                    y='Variable',
                    orientation='h',
                    title="üéØ Impact des Variables sur les Pr√©dictions",
                    color='Importance',
                    color_continuous_scale='Viridis',
                    text='Pourcentage'
                )
                
                fig_importance.update_traces(
                    texttemplate='%{text:.1f}%',
                    textposition='outside'
                )
                
                fig_importance.update_layout(
                    height=400,
                    xaxis_title="Importance (Contribution au Mod√®le)",
                    yaxis_title="Variables"
                )
                
                st.plotly_chart(fig_importance, use_container_width=True)
                
                # Interpr√©tation automatique
                top_variable = feature_importance_df.iloc[-1]
                second_variable = feature_importance_df.iloc[-2] if len(feature_importance_df) > 1 else None
                
                col_interp1, col_interp2 = st.columns(2)
                
                with col_interp1:
                    st.success(f"""
                    üèÜ **Variable la plus influente :**
                    **{top_variable['Variable']}** ({top_variable['Pourcentage']:.1f}% de l'impact)
                    
                    Cette variable est cruciale pour les pr√©dictions !
                    """)
                
                with col_interp2:
                    if second_variable is not None:
                        st.info(f"""
                        ü•à **Deuxi√®me variable cl√© :**
                        **{second_variable['Variable']}** ({second_variable['Pourcentage']:.1f}% de l'impact)
                        
                        Compl√®te efficacement la premi√®re !
                        """)
                
                # Score Out-of-Bag si disponible
                if hasattr(rf_model, 'oob_score_') and rf_model.oob_score_ is not None:
                    st.info(f"üìä **Score Out-of-Bag (validation interne)** : {rf_model.oob_score_:.1%}")
            
            elif best_model_name == "R√©gression Logistique":
                lr_model = results[best_model_name]['model']
                coeffs = lr_model.coef_[0] if len(lr_model.coef_.shape) > 1 else lr_model.coef_
                
                coeff_df = pd.DataFrame({
                    'Variable': feature_cols,
                    'Coefficient': coeffs,
                    'Impact_Abs': np.abs(coeffs),
                    'Direction': ['Positif ‚¨ÜÔ∏è' if x > 0 else 'N√©gatif ‚¨áÔ∏è' for x in coeffs]
                }).sort_values('Impact_Abs', ascending=True)
                
                fig_coeff = px.bar(
                    coeff_df,
                    x='Coefficient',
                    y='Variable',
                    orientation='h',
                    title="üìä Coefficients de la R√©gression Logistique",
                    color='Coefficient',
                    color_continuous_scale='RdBu',
                    text='Direction'
                )
                
                fig_coeff.add_vline(x=0, line_dash="dash", line_color="gray")
                fig_coeff.update_layout(height=400)
                
                st.plotly_chart(fig_coeff, use_container_width=True)
                
                # Interpr√©tation des coefficients
                st.markdown("**üìù Interpr√©tation :**")
                st.write("‚Ä¢ **Coefficient positif** : Augmente la probabilit√© de la classe cible")
                st.write("‚Ä¢ **Coefficient n√©gatif** : Diminue la probabilit√© de la classe cible")
                st.write("‚Ä¢ **Plus le coefficient est grand en valeur absolue**, plus l'impact est fort")
            
            # =============================================
            # ANALYSE DE CAS CONCRETS
            # =============================================
            
            st.markdown("### üîç **Analyse de 3 Cas Concrets**")
            st.markdown("*Exemples r√©els pour comprendre le comportement du mod√®le*")
            
            # S√©lectionner 3 cas int√©ressants
            y_pred_proba_best = results[best_model_name]['y_pred_proba']
            y_pred_best = results[best_model_name]['y_pred']
            
            # Crit√®res : 1 tr√®s confiant correct, 1 incertain, 1 erreur
            confidence_scores = np.max(y_pred_proba_best, axis=1)
            correct_predictions = y_pred_best == y_test
            
            cases_to_show = []
            
            # Cas 1 : Pr√©diction tr√®s confiante et correcte
            high_conf_correct = np.where((confidence_scores > 0.8) & correct_predictions)[0]
            if len(high_conf_correct) > 0:
                cases_to_show.append(("‚úÖ Pr√©diction Excellente", high_conf_correct[0], "green"))
            
            # Cas 2 : Pr√©diction incertaine
            uncertain = np.where((confidence_scores > 0.4) & (confidence_scores < 0.7))[0]
            if len(uncertain) > 0:
                cases_to_show.append(("ü§î Cas Limite", uncertain[0], "orange"))
            
            # Cas 3 : Erreur de pr√©diction
            incorrect = np.where(~correct_predictions)[0]
            if len(incorrect) > 0:
                cases_to_show.append(("‚ùå Erreur du Mod√®le", incorrect[0], "red"))
            
            # Affichage des cas
            for i, (title, idx, color) in enumerate(cases_to_show):
                with st.container():
                    st.markdown(f"""
                    <div style="border: 2px solid {color}; border-radius: 10px; padding: 15px; margin: 10px 0;">
                    <h4>{title}</h4>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    col_profile, col_prediction = st.columns([1, 1])
                    
                    with col_profile:
                        st.markdown("**üë§ Profil :**")
                        individual_features = X_test.iloc[idx] if hasattr(X_test, 'iloc') else X_test[idx]
                        
                        if hasattr(individual_features, 'items'):
                            for feature, value in individual_features.items():
                                if feature in encoders:
                                    try:
                                        value_decoded = encoders[feature].inverse_transform([int(value)])[0]
                                        st.write(f"‚Ä¢ **{feature}** : {value_decoded}")
                                    except:
                                        st.write(f"‚Ä¢ **{feature}** : {value}")
                                else:
                                    st.write(f"‚Ä¢ **{feature}** : {value}")
                        else:
                            for j, feature in enumerate(feature_cols):
                                value = individual_features[j]
                                if feature in encoders:
                                    try:
                                        value_decoded = encoders[feature].inverse_transform([int(value)])[0]
                                        st.write(f"‚Ä¢ **{feature}** : {value_decoded}")
                                    except:
                                        st.write(f"‚Ä¢ **{feature}** : {value}")
                                else:
                                    st.write(f"‚Ä¢ **{feature}** : {value}")
                    
                    with col_prediction:
                        st.markdown("**üéØ Pr√©diction :**")
                        predicted_proba = y_pred_proba_best[idx]
                        predicted_class = y_pred_best[idx]
                        actual_class = y_test[idx] if hasattr(y_test, '__getitem__') else y_test.iloc[idx]
                        
                        # D√©coder les classes
                        if target_encoder:
                            predicted_name = target_encoder.inverse_transform([predicted_class])[0]
                            actual_name = target_encoder.inverse_transform([actual_class])[0]
                        else:
                            predicted_name = str(predicted_class)
                            actual_name = str(actual_class)
                        
                        confidence = np.max(predicted_proba) * 100
                        st.write(f"‚Ä¢ **Pr√©dite** : {predicted_name}")
                        st.write(f"‚Ä¢ **Confiance** : {confidence:.1f}%")
                        st.write(f"‚Ä¢ **R√©elle** : {actual_name}")
                        
                        # Explication simple
                        if best_model_name == "Random Forest":
                            top_features = feature_importance_df.tail(2)['Variable'].values
                            st.markdown("**üí° Facteurs cl√©s :**")
                            for feature in top_features:
                                st.write(f"‚Ä¢ {feature}")
            
            st.success("‚ú® **Ces exemples montrent comment le mod√®le 'raisonne' sur des cas r√©els !**")
            
            st.markdown("### üîç **Quelles variables sont les plus importantes ?**")
            
            # Feature importance pour Random Forest
            if "Random Forest" in results and best_model_name == "Random Forest":
                importances = results["Random Forest"]['model'].feature_importances_
                feature_importance_df = pd.DataFrame({
                    'Variable': feature_cols,
                    'Importance': importances
                }).sort_values('Importance', ascending=True)
                
                fig_importance = px.bar(
                    feature_importance_df,
                    x='Importance',
                    y='Variable',
                    orientation='h',
                    title="Importance des Variables (Random Forest)",
                    color='Importance',
                    color_continuous_scale='Viridis'
                )
                
                st.plotly_chart(fig_importance, use_container_width=True)
            
            # Pour les autres mod√®les, coefficients
            elif best_model_name == "R√©gression Logistique":
                coeffs = results["R√©gression Logistique"]['model'].coef_[0]
                coeff_df = pd.DataFrame({
                    'Variable': feature_cols,
                    'Coefficient': np.abs(coeffs)
                }).sort_values('Coefficient', ascending=True)
                
                fig_coeff = px.bar(
                    coeff_df,
                    x='Coefficient',
                    y='Variable',
                    orientation='h',
                    title="Importance des Variables (R√©gression Logistique)",
                    color='Coefficient',
                    color_continuous_scale='Plasma'
                )
                
                st.plotly_chart(fig_coeff, use_container_width=True)
            
            # =============================================
            # MATRICE DE CONFUSION INTERACTIVE
            # =============================================
            
            st.markdown("### üéØ **Matrice de Confusion : O√π le mod√®le se trompe-t-il ?**")
            
            from sklearn.metrics import confusion_matrix
            
            # Matrice pour le meilleur mod√®le
            cm = confusion_matrix(y_test, results[best_model_name]['y_pred'])
            
            # Labels originaux si encodage
            if target_encoder:
                labels = target_encoder.classes_
            else:
                labels = np.unique(y_encoded)
            
            # Visualisation interactive
            fig_cm = px.imshow(
                cm,
                text_auto=True,
                aspect="auto",
                color_continuous_scale='Blues',
                title=f"Matrice de Confusion - {best_model_name}",
                labels=dict(x="Pr√©dictions", y="Vraies Valeurs", color="Nombre"),
                x=labels,
                y=labels
            )
            
            fig_cm.update_layout(
                width=500,
                height=500
            )
            
            st.plotly_chart(fig_cm, use_container_width=True)
            
            # Calcul de la pr√©cision par classe
            diag = np.diag(cm)
            row_sums = cm.sum(axis=1)
            class_accuracy = diag / row_sums
            
            st.markdown("**Pr√©cision par classe :**")
            for i, label in enumerate(labels):
                st.metric(f"Classe '{label}'", f"{class_accuracy[i]:.1%}")
            
            # =============================================
            # RECOMMANDATIONS FINALES
            # =============================================
            
            st.markdown("### üí° **Recommandations & Prochaines √âtapes**")
            
            col_rec1, col_rec2 = st.columns(2)
            
            with col_rec1:
                st.markdown("**üéØ Pour am√©liorer le mod√®le :**")
                if best_accuracy < 0.8:
                    st.write("‚Ä¢ Collecter plus de donn√©es")
                    st.write("‚Ä¢ Ajouter des variables explicatives")
                    st.write("‚Ä¢ Essayer des techniques d'ensemble")
                else:
                    st.write("‚Ä¢ Le mod√®le est d√©j√† performant !")
                    st.write("‚Ä¢ Valider sur de nouvelles donn√©es")
                    st.write("‚Ä¢ D√©ployer en production")
            
            with col_rec2:
                st.markdown("**üíº Applications pratiques :**")
                st.write("‚Ä¢ Cibler les campagnes de sensibilisation")
                st.write("‚Ä¢ Identifier les utilisateurs √† risque")
                st.write("‚Ä¢ Personnaliser les contenus √©ducatifs")
                st.write("‚Ä¢ Optimiser les strat√©gies de communication")
            
            # R√©sum√© final
            st.success(f"""
            üéâ **Analyse Termin√©e avec Succ√®s !**
            
            ‚úÖ **Meilleur mod√®le** : {best_model_name}  
            ‚úÖ **Performance** : {best_accuracy:.1%} d'accuracy  
            ‚úÖ **Dataset** : {len(ml_data)} observations analys√©es  
            ‚úÖ **Variables** : {len(feature_cols)} caract√©ristiques utilis√©es
            """)
        
        else:
            st.error("‚ùå Aucun mod√®le n'a pu √™tre entra√Æn√© avec succ√®s")
    
    # =============================================
    # SECTION √âDUCATIVE
    # =============================================
    
    with st.expander("üìö **Comprendre le Machine Learning en 3 minutes**", expanded=False):
        st.markdown("""
        ### ü§î **Qu'est-ce qu'on fait exactement ?**
        
        **1. üéØ L'objectif :**
        - On veut pr√©dire une caract√©ristique (ex: "a vu un DeepFake") 
        - √Ä partir d'autres informations (√¢ge, genre, etc.)
        
        **2. üîß Comment √ßa marche :**
        - L'algorithme analyse les donn√©es d'entra√Ænement
        - Il trouve des "patterns" (motifs r√©currents)
        - Il utilise ces patterns pour pr√©dire de nouveaux cas
        
        **3. üìä Les m√©triques importantes :**
        - **Accuracy** : % de pr√©dictions correctes
        - **AUC** : Capacit√© √† distinguer les classes (0.5 = hasard, 1.0 = parfait)
        - **Courbe ROC** : Visualise la qualit√© du mod√®le
        
        **4. ‚ö†Ô∏è Les pi√®ges √† √©viter :**
        - **Surapprentissage** : Le mod√®le m√©morise au lieu d'apprendre
        - **Sous-apprentissage** : Le mod√®le est trop simple
        - **Biais** : Le mod√®le reproduit les biais des donn√©es
        """)
    
    # Message final si pas encore lanc√©
    if 'results' not in locals():
        st.info("üëÜ **Cliquez sur 'LANCER L'ANALYSE COMPL√àTE' pour voir la magie op√©rer !**")

# =============================================
# ONGLET 4 - ANALYSE QUALITATIVE COMPL√àTE
# =============================================

with tab4:
    st.title("üé≠ Analyse Qualitative des Personas DeepFakes")
    
    # =============================================
    # CHARGEMENT DES DONN√âES QUALITATIVES
    # =============================================
    @st.cache_data
    def load_personas_data():
        """Charge les donn√©es qualitatives depuis GitHub"""
        try:
            url = 'https://raw.githubusercontent.com/Gnatey/M-moire_Deepfake/refs/heads/main/quantitatif.csv'
            df_personas = pd.read_csv(url, encoding='utf-8')
            return df_personas
        except Exception as e:
            st.error(f"Erreur lors du chargement des personas : {str(e)}")
            return pd.DataFrame()
    
    # Chargement des donn√©es
    df_personas = load_personas_data()
    
    if df_personas.empty:
        st.warning("‚ö†Ô∏è Impossible de charger les donn√©es qualitatives")
        st.stop()
    
    # =============================================
    # M√âTRIQUES GLOBALES
    # =============================================
    st.header("üìä Vue d'Ensemble des Personas")
    
    col_metric1, col_metric2, col_metric3, col_metric4 = st.columns(4)
    
    with col_metric1:
        total_personas = len(df_personas)
        st.metric("Nombre de Personas", total_personas)
    
    with col_metric2:
        avg_age = df_personas['Tranche d\'√¢ge'].apply(
            lambda x: int(x.split(':')[1].split('-')[0].strip()) if ':' in str(x) and '-' in str(x) else 30
        ).mean()
        st.metric("√Çge Moyen", f"{avg_age:.0f} ans")
    
    with col_metric3:
        cadres_pct = (df_personas['Cat√©gorie socio-professionnelle'] == 'Cadre').mean() * 100
        st.metric("% Cadres", f"{cadres_pct:.0f}%")
    
    with col_metric4:
        high_mistrust = df_personas['Niveau de m√©fiance'].str.contains('Tr√®s m√©fiant|Extr√™mement m√©fiant', na=False).mean() * 100
        st.metric("% Tr√®s M√©fiants", f"{high_mistrust:.0f}%")
    
    # =============================================
    # SECTION 1 : GALERIE INTERACTIVE DES PERSONAS
    # =============================================
    st.header("üñºÔ∏è Galerie Interactive des Personas")
    
    # Filtres pour la galerie
    col_filter1, col_filter2, col_filter3 = st.columns(3)
    
    with col_filter1:
        age_filter = st.multiselect(
            "Filtrer par √¢ge :",
            options=df_personas['Tranche d\'√¢ge'].unique(),
            default=df_personas['Tranche d\'√¢ge'].unique()
        )
    
    with col_filter2:
        csp_filter = st.multiselect(
            "Filtrer par CSP :",
            options=df_personas['Cat√©gorie socio-professionnelle'].unique(),
            default=df_personas['Cat√©gorie socio-professionnelle'].unique()
        )
    
    with col_filter3:
        mefi_filter = st.selectbox(
            "Niveau de m√©fiance :",
            options=["Tous"] + list(df_personas['Niveau de m√©fiance'].unique()),
            index=0
        )
    
    # Application des filtres
    filtered_personas = df_personas[
        (df_personas['Tranche d\'√¢ge'].isin(age_filter)) &
        (df_personas['Cat√©gorie socio-professionnelle'].isin(csp_filter))
    ]
    
    if mefi_filter != "Tous":
        filtered_personas = filtered_personas[filtered_personas['Niveau de m√©fiance'] == mefi_filter]
    
    # Affichage des cartes personas
    st.subheader(f"üé≠ {len(filtered_personas)} Personas S√©lectionn√©s")
    
    # Grille de personas (3 par ligne)
    for i in range(0, len(filtered_personas), 3):
        cols = st.columns(3)
        for j, col in enumerate(cols):
            if i + j < len(filtered_personas):
                persona = filtered_personas.iloc[i + j]
                
                with col:
                    # D√©terminer la couleur selon le niveau de m√©fiance
                    if "Tr√®s m√©fiant" in str(persona['Niveau de m√©fiance']):
                        border_color = "red"
                        emoji = "üî¥"
                    elif "M√©fiant" in str(persona['Niveau de m√©fiance']):
                        border_color = "orange" 
                        emoji = "üü†"
                    else:
                        border_color = "green"
                        emoji = "üü¢"
                    
                    # Carte persona
                    st.markdown(f"""
                    <div style="border: 2px solid {border_color}; border-radius: 15px; padding: 15px; margin: 10px 0; background-color: rgba(255,255,255,0.05);">
                        <h4>{emoji} {persona['Nom']}</h4>
                        <p><strong>üë§ {persona['Tranche d\'√¢ge']}</strong></p>
                        <p><strong>üíº {persona['M√©tier']}</strong></p>
                        <p><strong>üìç {persona['Localisation']}</strong></p>
                        <p style="font-style: italic; color: #888;">"{persona['Citation-cl√©'][:80]}..."</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Bouton d√©tails
                    if st.button(f"üëÅÔ∏è D√©tails", key=f"details_{i+j}"):
                        st.session_state[f'show_details_{i+j}'] = True
                    
                    # Affichage des d√©tails si demand√©
                    if st.session_state.get(f'show_details_{i+j}', False):
                        with st.expander(f"D√©tails complets - {persona['Nom']}", expanded=True):
                            st.markdown(f"**Profil :** {persona['R√©sum√© du profil']}")
                            st.markdown(f"**Exp√©rience :** {persona['Exp√©rience v√©cue']}")
                            st.markdown(f"**Comportements :** {persona['Comportements num√©riques']}")
                            st.markdown(f"**Attentes :** {persona['Attentes et besoins']}")
                            st.markdown(f"**Vision future :** {persona['Vision future']}")
                            
                            if st.button("‚úñÔ∏è Fermer", key=f"close_{i+j}"):
                                st.session_state[f'show_details_{i+j}'] = False
                                st.experimental_rerun()
    
    # =============================================
    # SECTION 2 : ANALYSE TH√âMATIQUE AVANC√âE
    # =============================================
    st.header("‚òÅÔ∏è Analyse Th√©matique des Verbatims")
    
    tab_theme1, tab_theme2, tab_theme3 = st.tabs(["Citations Cl√©s", "Exp√©riences", "Attentes"])
    
    with tab_theme1:
        st.subheader("üí¨ Nuage de Mots - Citations Cl√©s")
        
        # Concat√©nation des citations
        all_citations = ' '.join(filtered_personas['Citation-cl√©'].dropna())
        
        # Mots les plus fr√©quents (version simple)
        words = all_citations.lower().split()
        stop_words = {'le', 'la', 'les', 'de', 'du', 'des', 'un', 'une', 'et', 'ou', '√†', 'ce', 'qui', 'que', 'sur', 'il', 'elle', 'on', 'pas', 'ne', 'plus', 'tout', 'je', 'avec', 'pour', 'dans', 'par', 'sans', 'peut', 'faire', 'mais', '√ßa', 'aux', 'avoir', '√™tre', 'tr√®s', 'bien', 'encore', 'toujours', 'm√™me'}
        clean_words = [word.strip('.,!?";()') for word in words if len(word) > 3 and word not in stop_words]
        
        word_freq = pd.Series(clean_words).value_counts().head(20)
        
        # Graphique horizontal des mots-cl√©s
        fig_words = px.bar(
            x=word_freq.values,
            y=word_freq.index,
            orientation='h',
            title="Top 20 des Mots-Cl√©s dans les Citations",
            color=word_freq.values,
            color_continuous_scale='Viridis'
        )
        fig_words.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig_words, use_container_width=True)
        
        # Analyse de sentiment simple
        st.subheader("üìä Analyse de Sentiment des Citations")
        
        # Classification simple par mots-cl√©s
        positive_words = ['confiance', 'fiable', 'bon', 'bien', 'positif', 's√ªr', 'vrai']
        negative_words = ['m√©fiance', 'faux', 'dangereux', 'risqu√©', 'peur', 'probl√®me', 'tromper']
        
        sentiments = []
        for citation in filtered_personas['Citation-cl√©'].dropna():
            citation_lower = citation.lower()
            pos_count = sum(1 for word in positive_words if word in citation_lower)
            neg_count = sum(1 for word in negative_words if word in citation_lower)
            
            if pos_count > neg_count:
                sentiments.append('Positif')
            elif neg_count > pos_count:
                sentiments.append('N√©gatif')
            else:
                sentiments.append('Neutre')
        
        sentiment_counts = pd.Series(sentiments).value_counts()
        
        fig_sentiment = px.pie(
            values=sentiment_counts.values,
            names=sentiment_counts.index,
            title="R√©partition des Sentiments",
            color_discrete_map={'Positif': '#2ecc71', 'N√©gatif': '#e74c3c', 'Neutre': '#95a5a6'}
        )
        st.plotly_chart(fig_sentiment, use_container_width=True)
    
    with tab_theme2:
        st.subheader("üìñ Analyse des Exp√©riences V√©cues")
        
        # Extraction des plateformes mentionn√©es
        all_experiences = ' '.join(filtered_personas['Exp√©rience v√©cue'].dropna())
        platforms_mentioned = ['YouTube', 'TikTok', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn']
        
        platform_counts = {}
        for platform in platforms_mentioned:
            count = all_experiences.lower().count(platform.lower())
            if count > 0:
                platform_counts[platform] = count
        
        if platform_counts:
            fig_platforms_exp = px.bar(
                x=list(platform_counts.keys()),
                y=list(platform_counts.values()),
                title="Plateformes Mentionn√©es dans les Exp√©riences",
                color=list(platform_counts.values()),
                color_continuous_scale='Plasma'
            )
            st.plotly_chart(fig_platforms_exp, use_container_width=True)
        
        # Timeline des types d'exp√©riences
        st.subheader("üïê Types d'Exp√©riences Rapport√©es")
        
        experience_types = {
            'Exposition directe': ['vu', 'regard√©', 'd√©couvert'],
            'Sensibilisation indirecte': ['entendu parler', 'coll√®gues', 'amis'],
            'Analyse technique': ['analys√©', 'v√©rifi√©', 'technique'],
            'Partage/Viral': ['partag√©', 'viral', 'diffus√©']
        }
        
        type_counts = {}
        for exp_type, keywords in experience_types.items():
            count = sum(1 for exp in filtered_personas['Exp√©rience v√©cue'].dropna() 
                       if any(keyword in exp.lower() for keyword in keywords))
            type_counts[exp_type] = count
        
        fig_exp_types = px.bar(
            x=list(type_counts.keys()),
            y=list(type_counts.values()),
            title="Types d'Exp√©riences avec les DeepFakes",
            color=list(type_counts.values()),
            color_continuous_scale='Blues'
        )
        st.plotly_chart(fig_exp_types, use_container_width=True)
    
    with tab_theme3:
        st.subheader("üéØ Attentes et Besoins Exprim√©s")
        
        # Analyse des attentes
        all_attentes = ' '.join(filtered_personas['Attentes et besoins'].dropna())
        
        # Cat√©gories d'attentes
        attente_categories = {
            'Formation/√âducation': ['formation', '√©ducation', 'sensibilisation', 'cours'],
            'Outils Techniques': ['outils', 'd√©tection', 'logiciel', 'algorithme'],
            'R√©gulation': ['l√©gislation', 'loi', 'contr√¥le', 'interdiction'],
            'Transparence': ['signalement', 'alerte', 'identification', 'marquage']
        }
        
        attente_counts = {}
        for category, keywords in attente_categories.items():
            count = sum(1 for attente in filtered_personas['Attentes et besoins'].dropna()
                       if any(keyword in attente.lower() for keyword in keywords))
            attente_counts[category] = count
        
        fig_attentes = px.bar(
            x=list(attente_counts.keys()),
            y=list(attente_counts.values()),
            title="Cat√©gories d'Attentes et Besoins",
            color=list(attente_counts.values()),
            color_continuous_scale='Oranges'
        )
        st.plotly_chart(fig_attentes, use_container_width=True)
        
        # Top citations d'attentes
        st.subheader("üí° Citations Marquantes sur les Attentes")
        for i, attente in enumerate(filtered_personas['Attentes et besoins'].dropna().head(5)):
            st.markdown(f"""
            <div style="border-left: 4px solid #3498db; padding-left: 15px; margin: 10px 0; background-color: rgba(52, 152, 219, 0.1);">
                <em>"{attente[:150]}..."</em>
            </div>
            """, unsafe_allow_html=True)
    
    # =============================================
    # SECTION 3 : CARTOGRAPHIE COMPORTEMENTALE
    # =============================================
    st.header("üó∫Ô∏è Cartographie G√©ographique et Sociale")
    
    tab_geo, tab_social, tab_network = st.tabs(["G√©ographie", "Sociologie", "R√©seau"])
    
    with tab_geo:
        st.subheader("üìç R√©partition G√©ographique")
        
        # Extraction des villes
        villes_count = filtered_personas['Localisation'].str.extract(r'([^,]+)')[0].value_counts()
        
        fig_geo = px.bar(
            x=villes_count.index,
            y=villes_count.values,
            title="R√©partition par Ville",
            color=villes_count.values,
            color_continuous_scale='Viridis'
        )
        fig_geo.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_geo, use_container_width=True)
        
        # Cartographie simple (simul√©e)
        st.subheader("üó∫Ô∏è Carte de France des Personas")
        
        # Coordonn√©es approximatives des villes principales
        city_coords = {
            'Paris': [48.8566, 2.3522],
            'Lyon': [45.7640, 4.8357],
            'Marseille': [43.2965, 5.3698],
            'Toulouse': [43.6047, 1.4442],
            'Nice': [43.7102, 7.2620],
            'Nantes': [47.2184, -1.5536],
            'Strasbourg': [48.5734, 7.7521],
            'Montpellier': [43.6110, 3.8767],
            'Lille': [50.6292, 3.0573],
            'Rennes': [48.1173, -1.6778],
            'Bordeaux': [44.8378, -0.5792],
            'Reims': [49.2583, 4.0317]
        }
        
        # Pr√©paration des donn√©es de carte
        map_data = []
        for _, persona in filtered_personas.iterrows():
            ville = persona['Localisation'].split(',')[0].strip()
            if ville in city_coords:
                map_data.append({
                    'ville': ville,
                    'lat': city_coords[ville][0],
                    'lon': city_coords[ville][1],
                    'nom': persona['Nom'],
                    'metier': persona['M√©tier'],
                    'm√©fiance': persona['Niveau de m√©fiance']
                })
        
        if map_data:
            df_map = pd.DataFrame(map_data)
            fig_map = px.scatter_mapbox(
                df_map,
                lat="lat",
                lon="lon",
                hover_name="nom",
                hover_data={"metier": True, "m√©fiance": True},
                color="m√©fiance",
                size_max=15,
                zoom=5,
                mapbox_style="open-street-map",
                title="Localisation des Personas en France"
            )
            fig_map.update_layout(height=500)
            st.plotly_chart(fig_map, use_container_width=True)
    
    with tab_social:
        st.subheader("üë• Analyse Sociologique")
        
        # Pyramide des √¢ges
        age_ranges = filtered_personas['Tranche d\'√¢ge'].value_counts()
        
        fig_pyramid = px.bar(
            x=age_ranges.values,
            y=age_ranges.index,
            orientation='h',
            title="Pyramide des √Çges",
            color=age_ranges.values,
            color_continuous_scale='Blues'
        )
        st.plotly_chart(fig_pyramid, use_container_width=True)
        
        # Heatmap Classe sociale vs Niveau d'√©tude
        heatmap_data = pd.crosstab(
            filtered_personas['Classe sociale'],
            filtered_personas['Niveau d\'√©tude']
        )
        
        fig_heatmap = px.imshow(
            heatmap_data,
            text_auto=True,
            aspect="auto",
            title="Matrice Classe Sociale √ó Niveau d'√âtude",
            color_continuous_scale='Oranges'
        )
        st.plotly_chart(fig_heatmap, use_container_width=True)
        
        # Distribution des CSP
        csp_counts = filtered_personas['Cat√©gorie socio-professionnelle'].value_counts()
        
        fig_csp = px.pie(
            values=csp_counts.values,
            names=csp_counts.index,
            title="R√©partition des Cat√©gories Socio-Professionnelles",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig_csp, use_container_width=True)
    
    with tab_network:
        st.subheader("üï∏Ô∏è R√©seau de Similarit√©s")
        
        # Analyse de r√©seau bas√©e sur les plateformes risqu√©es
        st.markdown("**Connexions bas√©es sur les plateformes jug√©es risqu√©es**")
        
        # Pr√©paration du r√©seau
        import networkx as nx
        
        G = nx.Graph()
        
        # Ajouter les n≈ìuds (personas)
        for _, persona in filtered_personas.iterrows():
            G.add_node(persona['Nom'], 
                      type='persona',
                      metier=persona['M√©tier'],
                      m√©fiance=persona['Niveau de m√©fiance'])
        
        # Ajouter les plateformes comme n≈ìuds
        all_platforms = set()
        for plateformes in filtered_personas['Plateformes jug√©es risqu√©es'].dropna():
            platforms = [p.strip() for p in plateformes.split(',')]
            all_platforms.update(platforms)
        
        for platform in all_platforms:
            G.add_node(platform, type='platform')
        
        # Cr√©er les connexions persona-plateforme
        for _, persona in filtered_personas.iterrows():
            if pd.notna(persona['Plateformes jug√©es risqu√©es']):
                platforms = [p.strip() for p in persona['Plateformes jug√©es risqu√©es'].split(',')]
                for platform in platforms:
                    if platform in all_platforms:
                        G.add_edge(persona['Nom'], platform)
        
        # Visualisation du r√©seau
        if len(G.nodes()) > 0:
            pos = nx.spring_layout(G, k=3, iterations=50)
            
            # Pr√©paration des donn√©es pour Plotly
            edge_x = []
            edge_y = []
            for edge in G.edges():
                x0, y0 = pos[edge[0]]
                x1, y1 = pos[edge[1]]
                edge_x.extend([x0, x1, None])
                edge_y.extend([y0, y1, None])
            
            # Traces des ar√™tes
            edge_trace = go.Scatter(
                x=edge_x, y=edge_y,
                line=dict(width=0.5, color='#888'),
                hoverinfo='none',
                mode='lines'
            )
            
            # Traces des n≈ìuds
            node_x = []
            node_y = []
            node_info = []
            node_colors = []
            
            for node in G.nodes():
                x, y = pos[node]
                node_x.append(x)
                node_y.append(y)
                
                if G.nodes[node].get('type') == 'persona':
                    node_info.append(f"üë§ {node}<br>M√©tier: {G.nodes[node].get('metier', 'N/A')}")
                    node_colors.append('#3498db')
                else:
                    node_info.append(f"üì± {node}")
                    node_colors.append('#e74c3c')
            
            node_trace = go.Scatter(
                x=node_x, y=node_y,
                mode='markers+text',
                hoverinfo='text',
                text=[node for node in G.nodes()],
                textposition="middle center",
                hovertext=node_info,
                marker=dict(
                    size=15,
                    color=node_colors,
                    line=dict(width=2)
                )
            )
            
            # Cr√©ation de la figure
            fig_network = go.Figure(
                data=[edge_trace, node_trace],
                layout=go.Layout(
                    title='R√©seau Personas ‚Üî Plateformes Risqu√©es',
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20,l=5,r=5,t=40),
                    annotations=[
                        dict(
                            text="Bleu = Personas, Rouge = Plateformes",
                            showarrow=False,
                            xref="paper", yref="paper",
                            x=0.005, y=-0.002,
                            xanchor='left', yanchor='bottom',
                            font=dict(size=12)
                        )
                    ],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    height=600
                )
            )
            
            st.plotly_chart(fig_network, use_container_width=True)
        else:
            st.warning("Pas assez de donn√©es pour cr√©er le r√©seau")
    
    # =============================================
    # SECTION 4 : G√âN√âRATEUR D'INSIGHTS
    # =============================================
    st.header("üß† G√©n√©rateur d'Insights Automatiques")
    
    col_insight1, col_insight2 = st.columns(2)
    
    with col_insight1:
        st.subheader("üéØ Segments Identifi√©s")
        
        # Segmentation automatique basique
        segments = {
            "Tech Experts": filtered_personas[
                (filtered_personas['M√©tier'].str.contains('D√©veloppeur|IT|Tech|Informatique', na=False)) &
                (filtered_personas['Niveau de m√©fiance'].str.contains('M√©fiant mais', na=False))
            ],
            "Sceptiques Avertis": filtered_personas[
                (filtered_personas['Niveau de m√©fiance'].str.contains('Tr√®s m√©fiant', na=False)) &
                (filtered_personas['Niveau d\'√©tude'].isin(['Bac+5', 'Doctorat']))
            ],
            "Jeunes Sensibilis√©s": filtered_personas[
                (filtered_personas['Tranche d\'√¢ge'].str.contains('16-17|20-25', na=False)) &
                (filtered_personas['Niveau de m√©fiance'].str.contains('m√©fiant', na=False))
            ],
            "Prudents Exp√©riment√©s": filtered_personas[
                (filtered_personas['Tranche d\'√¢ge'].str.contains('45-55', na=False)) &
                (filtered_personas['Fr√©quence d\'utilisation par jour'] == '< 30 min')
            ]
        }
        
        for segment_name, segment_data in segments.items():
            if len(segment_data) > 0:
                st.markdown(f"""
                <div style="border: 1px solid #3498db; border-radius: 10px; padding: 15px; margin: 10px 0; background-color: rgba(52, 152, 219, 0.1);">
                    <h4>üìä {segment_name}</h4>
                    <p><strong>{len(segment_data)} personas</strong></p>
                    <p><em>Noms :</em> {', '.join(segment_data['Nom'].tolist())}</p>
                </div>
                """, unsafe_allow_html=True)
    
    with col_insight2:
        st.subheader("üí° Insights Cl√©s")
        
        # G√©n√©ration d'insights automatiques
        insights = []
        
        # Insight 1: Corr√©lation √¢ge-m√©fiance
        young_cautious = len(filtered_personas[
            (filtered_personas['Tranche d\'√¢ge'].str.contains('16-17|20-25', na=False)) &
            (filtered_personas['Niveau de m√©fiance'].str.contains('m√©fiant', na=False))
        ])
        if young_cautious > 0:
            insights.append(f"üîç {young_cautious} jeunes personas montrent une m√©fiance pr√©coce")
        
        # Insight 2: Expertise vs comportement
        tech_experts = len(filtered_personas[
            filtered_personas['M√©tier'].str.contains('D√©veloppeur|IT|Tech', na=False)
        ])
        if tech_experts > 0:
            insights.append(f"‚ö° {tech_experts} experts techniques dans l'√©chantillon")
        
        # Insight 3: Plateformes les plus cit√©es
        all_platforms_text = ' '.join(filtered_personas['Plateformes jug√©es risqu√©es'].dropna())
        common_platforms = ['Facebook', 'Instagram', 'TikTok', 'Twitter']
        most_mentioned = max(common_platforms, key=lambda x: all_platforms_text.count(x))
        insights.append(f"üì± {most_mentioned} = plateforme la plus mentionn√©e comme risqu√©e")
        
        # Insight 4: Formations demand√©es
        formations_mentioned = filtered_personas['Attentes et besoins'].str.contains('formation', na=False).sum()
        insights.append(f"üéì {formations_mentioned} personas demandent explicitement des formations")
        
        # Affichage des insights
        for i, insight in enumerate(insights):
            st.markdown(f"""
            <div style="border-left: 4px solid #e74c3c; padding: 10px; margin: 5px 0; background-color: rgba(231, 76, 60, 0.1);">
                <strong>Insight #{i+1}:</strong> {insight}
            </div>
            """, unsafe_allow_html=True)
    
    # =============================================
    # SECTION 5 : COMPARAISONS AVANC√âES
    # =============================================
    st.header("‚öñÔ∏è Comparaisons Multi-Niveaux")
    
    tab_comp1, tab_comp2, tab_comp3 = st.tabs(["M√©fiance vs Connaissance", "G√©n√©rations", "Comportements"])
    
    with tab_comp1:
        st.subheader("üîç Analyse M√©fiance vs Connaissance")
        
        # Cr√©ation d'un score de m√©fiance num√©rique
        def score_mefiance(mefiance_text):
            if "Extr√™mement" in str(mefiance_text):
                return 5
            elif "Tr√®s m√©fiant" in str(mefiance_text):
                return 4
            elif "M√©fiant" in str(mefiance_text):
                return 3
            elif "Mod√©r√©ment" in str(mefiance_text):
                return 2
            else:
                return 1
        
        # Score de connaissance
        def score_connaissance(conn_text):
            if "comprend" in str(conn_text).lower() or "algorithme" in str(conn_text).lower():
                return 4
            elif "technologie" in str(conn_text).lower() or "ia" in str(conn_text).lower():
                return 3
            elif "sais" in str(conn_text).lower() or "entendu" in str(conn_text).lower():
                return 2
            else:
                return 1
        
        # Application des scores
        scatter_data = filtered_personas.copy()
        scatter_data['Score_M√©fiance'] = scatter_data['Niveau de m√©fiance'].apply(score_mefiance)
        scatter_data['Score_Connaissance'] = scatter_data['Connaissance des deepfakes'].apply(score_connaissance)
        
        # Scatter plot
        fig_scatter = px.scatter(
            scatter_data,
            x='Score_Connaissance',
            y='Score_M√©fiance',
            hover_name='Nom',
            color='Cat√©gorie socio-professionnelle',
            size='Score_M√©fiance',
            title="Relation Connaissance ‚Üî M√©fiance",
            labels={'Score_Connaissance': 'Niveau de Connaissance (1-4)', 
                   'Score_M√©fiance': 'Niveau de M√©fiance (1-5)'}
        )
        st.plotly_chart(fig_scatter, use_container_width=True)
        
        # Corr√©lation
        correlation = scatter_data['Score_Connaissance'].corr(scatter_data['Score_M√©fiance'])
        st.metric("Corr√©lation Connaissance-M√©fiance", f"{correlation:.3f}")
    
    with tab_comp2:
        st.subheader("üë∂üë¥ Analyse G√©n√©rationnelle")
        
        # Regroupement par g√©n√©rations
        def categorize_generation(age_text):
            if "16-17" in str(age_text) or "20-25" in str(age_text):
                return "Gen Z (16-25)"
            elif "30-35" in str(age_text) or "30-40" in str(age_text):
                return "Millennials (30-40)"
            elif "45-55" in str(age_text) or "40-50" in str(age_text):
                return "Gen X (40-55)"
            else:
                return "Autres"
        
        gen_data = filtered_personas.copy()
        gen_data['G√©n√©ration'] = gen_data['Tranche d\'√¢ge'].apply(categorize_generation)
        
        # Comparaison par g√©n√©ration
        gen_comparison = gen_data.groupby('G√©n√©ration').agg({
            'Nom': 'count',
            'Fr√©quence d\'utilisation par jour': lambda x: (x == '1h').sum(),
            'Niveau de m√©fiance': lambda x: x.str.contains('Tr√®s m√©fiant', na=False).sum()
        }).rename(columns={
            'Nom': 'Nombre',
            'Fr√©quence d\'utilisation par jour': 'Gros Utilisateurs',
            'Niveau de m√©fiance': 'Tr√®s M√©fiants'
        })
        
        # Graphique g√©n√©rationnel
        fig_gen = px.bar(
            gen_comparison.reset_index(),
            x='G√©n√©ration',
            y=['Nombre', 'Gros Utilisateurs', 'Tr√®s M√©fiants'],
            title="Comparaison G√©n√©rationnelle",
            barmode='group',
            color_discrete_sequence=['#3498db', '#e74c3c', '#f39c12']
        )
        st.plotly_chart(fig_gen, use_container_width=True)
        
        # Tableau d√©taill√©
        st.dataframe(gen_comparison, use_container_width=True)
    
    with tab_comp3:
        st.subheader("üíª Analyse des Comportements Num√©riques")
        
        # Radar chart des comportements
        comportements_keywords = {
            'V√©rification': ['v√©rifie', 'v√©rification', 'contr√¥le'],
            'Partage': ['partage', 'diffuse', 'transmet'],
            '√âvitement': ['√©vite', 'fuis', 'ignore'],
            'Analyse': ['analyse', 'examine', '√©tudie'],
            'Sensibilisation': ['sensibilise', '√©duque', 'alerte']
        }
        
        # Score par comportement
        behavior_scores = {}
        for behavior, keywords in comportements_keywords.items():
            score = 0
            for text in filtered_personas['Comportements num√©riques'].dropna():
                if any(keyword in text.lower() for keyword in keywords):
                    score += 1
            behavior_scores[behavior] = score
        
        # Radar chart
        fig_radar = go.Figure()
        
        fig_radar.add_trace(go.Scatterpolar(
            r=list(behavior_scores.values()),
            theta=list(behavior_scores.keys()),
            fill='toself',
            name='Comportements Observ√©s',
            line_color='#3498db'
        ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(visible=True, range=[0, max(behavior_scores.values())])
            ),
            showlegend=True,
            title="Radar des Comportements Num√©riques",
            height=500
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
    
    # =============================================
    # SECTION 6 : EXPORT DE FICHES PERSONAS
    # =============================================
    st.header("üìÑ Export de Fiches Personas")
    
    col_export1, col_export2 = st.columns(2)
    
    with col_export1:
        selected_personas = st.multiselect(
            "S√©lectionnez les personas √† exporter :",
            options=filtered_personas['Nom'].tolist(),
            default=filtered_personas['Nom'].tolist()[:3]
        )
    
    with col_export2:
        export_format = st.selectbox(
            "Format d'export :",
            options=["CSV Complet", "JSON Structur√©", "R√©sum√© Ex√©cutif"]
        )
    
    if st.button("üì• G√©n√©rer l'Export"):
        export_data = filtered_personas[filtered_personas['Nom'].isin(selected_personas)]
        
        if export_format == "CSV Complet":
            csv_data = export_data.to_csv(index=False)
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger CSV",
                data=csv_data,
                file_name="personas_deepfakes_export.csv",
                mime="text/csv"
            )
        
        elif export_format == "JSON Structur√©":
            json_data = export_data.to_json(orient='records', indent=2)
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger JSON",
                data=json_data,
                file_name="personas_deepfakes_export.json",
                mime="application/json"
            )
        
        elif export_format == "R√©sum√© Ex√©cutif":
            executive_summary = f"""
# R√âSUM√â EX√âCUTIF - PERSONAS DEEPFAKES

## üìä Vue d'ensemble
- **Nombre de personas analys√©s** : {len(export_data)}
- **√Çge moyen** : {export_data['Tranche d\'√¢ge'].mode().iloc[0] if len(export_data) > 0 else 'N/A'}
- **CSP dominante** : {export_data['Cat√©gorie socio-professionnelle'].mode().iloc[0] if len(export_data) > 0 else 'N/A'}

## üéØ Insights Cl√©s
1. **Niveau de m√©fiance** : {export_data['Niveau de m√©fiance'].value_counts().index[0] if len(export_data) > 0 else 'N/A'}
2. **Plateforme la plus cit√©e** : Analyse des citations
3. **Attente principale** : Formation et sensibilisation

## üë• Personas S√©lectionn√©s
"""
            for _, persona in export_data.iterrows():
                executive_summary += f"""
### {persona['Nom']}
- **Profil** : {persona['M√©tier']}, {persona['Tranche d\'√¢ge']}
- **Citation** : "{persona['Citation-cl√©']}"
- **Comportement** : {persona['Comportements num√©riques'][:100]}...

---
"""
            
            st.download_button(
                label="‚¨áÔ∏è T√©l√©charger R√©sum√©",
                data=executive_summary,
                file_name="resume_executif_personas.md",
                mime="text/markdown"
            )
        
        st.success(f"‚úÖ Export de {len(selected_personas)} personas pr√©par√© !")
    
    # =============================================
    # FOOTER INSIGHTS
    # =============================================
    st.markdown("---")
    st.markdown("### üéØ Recommandations Strat√©giques")
    
    col_rec1, col_rec2, col_rec3 = st.columns(3)
    
    with col_rec1:
        st.info("""
        **üéì Formation & √âducation**
        - Cibler les jeunes g√©n√©rations
        - Modules techniques pour experts
        - Sensibilisation grand public
        """)
    
    with col_rec2:
        st.warning("""
        **üõ°Ô∏è Protection & Outils**
        - D√©velopper outils de d√©tection
        - Alertes sur plateformes
        - Guides de v√©rification
        """)
    
    with col_rec3:
        st.success("""
        **üì¢ Communication**
        - Messages adapt√©s par segment
        - Canaux de confiance privil√©gi√©s
        - T√©moignages d'experts
        """)

# =============================================
# SECTION COMMENTAIRES
# =============================================

# =============================================
# CONFIGURATION
# =============================================
COMMENTS_FILE = "comments_advanced.csv"

# =============================================
# API GOOGLE
# =============================================
def connect_to_gsheet():
    scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds_dict = st.secrets["GSHEET_CREDS"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
    client = gspread.authorize(creds)
    sheet = client.open("user").worksheet("user_data")
    return sheet

def load_users():
    sheet = connect_to_gsheet()
    data = sheet.get_all_records()
    return pd.DataFrame(data) if data else pd.DataFrame(columns=["id", "pseudo", "password"])

def save_user(pseudo, password):
    sheet = connect_to_gsheet()
    existing_users = sheet.get_all_records()
    next_id = len(existing_users) + 1
    sheet.append_row([next_id, pseudo, password])

def get_comments_sheet():
    sheet = connect_to_gsheet()
    return sheet.spreadsheet.worksheet("comments_data")

def load_comments():
    sheet = get_comments_sheet()
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def save_comment(user, comment):
    sheet = get_comments_sheet()
    new_row = [str(uuid.uuid4()), user, comment, datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
    sheet.append_row(new_row)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# =============================================
# INITIALISATION SESSION
# =============================================
if 'user_logged_in' not in st.session_state:
    st.session_state.user_logged_in = False

# =============================================
# SIDEBAR : CONNEXION / INSCRIPTION
# =============================================
def handle_auth():
    st.sidebar.header("üîê Connexion rapide")
    mode = st.sidebar.radio("Choisissez une option :", ["Se connecter", "S'inscrire"])

    with st.sidebar.form(key="auth_form"):
        pseudo = st.text_input("Votre pseudo").strip()
        password = st.text_input("Mot de passe", type="password")
        submit = st.form_submit_button("Valider")

        forbidden_pseudos = {"admin", "root", "support", "moderator","cacaboudin"}

        if submit:
            if not pseudo or not password:
                st.sidebar.error("Veuillez remplir tous les champs.")
            elif not pseudo.isalnum():
                st.sidebar.error("Le pseudo ne doit contenir que des lettres et des chiffres.")
            elif len(pseudo) < 3 or len(pseudo) > 20:
                st.sidebar.error("Le pseudo doit contenir entre 3 et 20 caract√®res.")
            elif pseudo.lower() in forbidden_pseudos:
                st.sidebar.error("Ce pseudo est r√©serv√©.")
            elif len(password) < 7:
                st.sidebar.error("Le mot de passe doit contenir au moins 7 caract√®res.")
            else:
                users_df = load_users()
                existing_pseudos_lower = users_df['pseudo'].str.lower()
                hashed_pwd = hash_password(password)

                if mode == "Se connecter":
                    if pseudo.lower() in existing_pseudos_lower.values:
                        user_row = users_df.loc[existing_pseudos_lower == pseudo.lower()].iloc[0]
                        if user_row['password'] == hashed_pwd:
                            st.session_state.user_logged_in = True
                            st.session_state.user_name = user_row['pseudo']
                            st.success(f"Bienvenue {user_row['pseudo']} !")
                            st.experimental_rerun()
                        else:
                            st.sidebar.error("Mot de passe incorrect.")
                    else:
                        st.sidebar.error("Utilisateur inconnu.")

                elif mode == "S'inscrire":
                    if pseudo.lower() in existing_pseudos_lower.values:
                        st.sidebar.error("Ce pseudo est d√©j√† utilis√©.")
                    else:
                        save_user(pseudo, hashed_pwd)
                        st.success("Inscription r√©ussie, vous √™tes connect√©.")
                        st.session_state.user_logged_in = True
                        st.session_state.user_name = pseudo
                        st.experimental_rerun()

    if st.session_state.user_logged_in:
        if st.sidebar.button("Se d√©connecter"):
            for key in ["user_logged_in", "user_name"]:
                if key in st.session_state:
                    del st.session_state[key]
            st.sidebar.success("D√©connect√© avec succ√®s.")
            st.experimental_rerun()

# =============================================
# APPEL CONNEXION
# =============================================
handle_auth()

# =============================================
# SECTION COMMENTAIRES
# =============================================

st.title("üí¨ Espace Commentaires")

# Chargement des commentaires
comments_df = load_comments()

# Fonction pour supprimer un commentaire par ID dans Google Sheets
def delete_comment(comment_id):
    sheet = get_comments_sheet()
    records = sheet.get_all_records()
    for i, row in enumerate(records, start=2):  # Ligne 2 car ligne 1 = en-t√™tes
        if row["id"] == comment_id:
            sheet.delete_rows(i)
            break

# Formulaire d'ajout de commentaire (si connect√©)
if st.session_state.get("user_logged_in", False):
    with st.form(key="comment_form", clear_on_submit=True):
        comment_text = st.text_area("Votre commentaire")
        submit_comment = st.form_submit_button("üì§ Envoyer")

        if submit_comment:
            if not comment_text:
                st.warning("Merci de remplir votre commentaire.")
            else:
                save_comment(st.session_state.user_name, comment_text.strip())
                st.success("Commentaire enregistr√©!")
                st.experimental_rerun()
else:
    st.info("üîí Connectez-vous pour pouvoir laisser un commentaire.")

# Affichage des derniers commentaires
st.subheader("üìù Derniers commentaires")

if comments_df.empty:
    st.info("Aucun commentaire pour le moment.")
else:
    comments_display = comments_df.sort_values("timestamp", ascending=False)
    for idx, row in comments_display.iterrows():
        with st.container(border=True):
            st.markdown(f"**{row['user']}** - *{row['timestamp']}*")
            st.markdown(f"> {row['comment']}")

            # Bouton de suppression (visible seulement pour l'auteur)
            if st.session_state.get("user_logged_in", False) and st.session_state.get("user_name") == row["user"]:
                delete_key = f"delete_{idx}"
                confirm_key = f"confirm_delete_{idx}"

                if st.button("üóëÔ∏è Supprimer", key=delete_key):
                    st.session_state[confirm_key] = True

                if st.session_state.get(confirm_key, False):
                    st.warning("‚ö†Ô∏è Confirmation suppression")
                    if st.button("‚úÖ Oui, supprimer", key=f"confirmed_{idx}"):
                        delete_comment(row["id"])
                        st.success("Commentaire supprim√©.")
                        st.session_state[confirm_key] = False
                        st.experimental_rerun()


# =============================================
# ONGLETS EN CONSTRUCTION - MESSAGE EDITEUR
# =============================================

with tab4:
    st.markdown("### üë©‚Äçüíª MESSAGE DEVELOPPEUSE")
    col_img, col_msg = st.columns([1, 5])
    with col_img:
        st.image("images.jpeg", width=100)
    with col_msg:
        st.info("Cet onglet est en cours de r√©daction. Vous verrez des visualisations sous peu.")

with tab3:
    st.markdown("### üë©‚Äçüíª MESSAGE DEVELOPPEUSE")
    col_img, col_msg = st.columns([1, 5])
    with col_img:
        st.image("images.jpeg", width=100)
    with col_msg:
        st.info("Cet onglet est en cours de r√©daction. Il n'est pas encore finalis√©. Certaines visualisations peuvent √™tre incorrectes")
