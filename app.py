import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import os
from datetime import datetime
from scipy.stats import chi2_contingency
import plotly.graph_objects as go
from PIL import Image
import networkx as nx
import matplotlib.pyplot as plt
from PIL import Image
from fpdf import FPDF
import streamlit as st
import io
import kaleido
import uuid
import hashlib
import json
from google.oauth2.service_account import Credentials
import gspread
import statsmodels.api as sm
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics import (confusion_matrix, classification_report, roc_curve, roc_auc_score,precision_recall_curve)
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
import plotly.graph_objects as go
from sklearn.utils import resample
import shap
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import SelectFromModel
# =============================================
# INITIALISATION ET CONFIGURATION DE BASE
# =============================================
st.set_page_config(
    page_title="Dashboard DeepFakes",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================
# FONCTIONS UTILITAIRES
# =============================================
def local_css(file_name):
    """Charge un fichier CSS personnalis√©"""
    try:
        with open(file_name) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
    except FileNotFoundError:
        st.markdown("""
        <style>
            .stMetric { border-radius: 10px; padding: 15px; background-color: #f8f9fa; }
            .stMetric label { font-size: 0.9rem; color: #6c757d; }
            .stMetric div { font-size: 1.4rem; font-weight: bold; color: #212529; }
            .stPlotlyChart { border: 1px solid #e1e4e8; border-radius: 8px; }
        </style>
        """, unsafe_allow_html=True)

def calculate_cramers_v(contingency_table):
    """Calcule le coefficient Cramer's V pour les tableaux de contingence"""
    chi2 = chi2_contingency(contingency_table)[0]
    n = contingency_table.sum().sum()
    phi2 = chi2/n
    r, k = contingency_table.shape
    return np.sqrt(phi2/min((k-1),(r-1)))

def truncate_label(text, max_length=25):
    """Tronque les libell√©s trop longs pour la lisibilit√©"""
    return (text[:max_length] + '...') if len(str(text)) > max_length else str(text)

# =============================================
# CHARGEMENT DES DONN√âES
# =============================================
@st.cache_data
def load_data():
    """Charge et pr√©pare les donn√©es avec gestion des erreurs"""
    url = 'https://raw.githubusercontent.com/Gnatey/M-moire_Deepfake/refs/heads/main/DeepFakes.csv'
    try:
        df = pd.read_csv(url, sep=';', encoding='utf-8')
        
        # Nettoyage des noms de colonnes
        df.columns = df.columns.str.strip()
        
        # Renommage des colonnes longues
        column_rename = {
            "Quel est votre tranche d'√¢ge ?": "Tranche d'√¢ge",
            "Vous √™tes ...?": "Genre",
            "Avez-vous d√©j√† entendu parler des Deep Fakes ?": "Connaissance DeepFakes",
            "Avez-vous d√©j√† vu un Deep Fake sur les r√©seaux sociaux ?": "Exposition DeepFakes",
            "_Sur quelles plateformes avez-vous principalement vu des Deep Fakes ? (Plusieurs choix possibles)": "Plateformes",
            "Comment √©valueriez vous votre niveau de connaissance des Deep Fakes ?": "Niveau connaissance",
            "Faites-vous confiance aux informations que vous trouvez sur les r√©seaux sociaux ?": "Confiance r√©seaux sociaux",
            "Selon vous, quel est l‚Äôimpact global des Deep Fakes sur la soci√©t√© ?": "Impact soci√©t√©"
        }
        
        return df.rename(columns=column_rename)
    
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {str(e)}")
        return pd.DataFrame()

# Chargement initial
df = load_data()
local_css("style.css")

# =============================================
# SIDEBAR FILTRES (version am√©lior√©e)
# =============================================
with st.sidebar:
    st.header("üéõÔ∏è Filtres Principaux")
    
    if not df.empty:
        # Filtres de base
        ages = df["Tranche d'√¢ge"].dropna().unique()
        genres = df["Genre"].dropna().unique()
        
        selected_ages = st.multiselect(
            "Tranches d'√¢ge :", 
            options=ages, 
            default=ages,
            help="S√©lectionnez les tranches d'√¢ge √† inclure"
        )
        
        selected_genres = st.multiselect(
            "Genres :", 
            options=genres, 
            default=genres,
            help="Filtrez les r√©sultats par genre"
        )
        
    else:
        selected_ages = []
        selected_genres = []

# Application des filtres
if not df.empty:
    filtered_df = df[
        (df["Tranche d'√¢ge"].isin(selected_ages)) &
        (df["Genre"].isin(selected_genres))
    ]
else:
    filtered_df = pd.DataFrame()

# =============================================
# ONGLETS PRINCIPAUX
# =============================================
st.title("üìä Dashboard Analyse des DeepFakes")
tab1, tab2,tab3,tab4,tab5 = st.tabs(["üè† Tableau de Bord", "üî¨ Exploration Avanc√©e", "üìà Analyse Statistique & R√©gression", "En cours", "En cours"])

# =============================================
# ONGLET 1 - TABLEAU DE BORD PRINCIPAL
# =============================================
with tab1:
    if filtered_df.empty:
        st.warning("Aucune donn√©e disponible avec les filtres s√©lectionn√©s.")
    else:
        st.header("üîç Indicateurs Cl√©s")
        
        # M√©triques en colonnes
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_respondents = len(filtered_df)
            st.metric("Nombre de R√©pondants", total_respondents)
        
        with col2:
            aware_yes = filtered_df["Connaissance DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            st.metric("% Connaissance DeepFakes", f"{aware_yes:.1f}%")
        
        with col3:
            seen_yes = filtered_df["Exposition DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            st.metric("% Ayant vu un DeepFake", f"{seen_yes:.1f}%")
        
        with col4:
            trust_mean = filtered_df["Confiance r√©seaux sociaux"].apply(lambda x: 1 if x == 'Oui' else 0).mean() * 100
            st.metric("Confiance moyenne (r√©seaux)", f"{trust_mean:.1f}%")
        
        # Visualisations principales
        st.header("üìà Visualisations Cl√©s")
        
        # 1. Niveau de connaissance
        st.subheader("Niveau de Connaissance des DeepFakes")
        knowledge_counts = filtered_df["Niveau connaissance"].value_counts().reset_index()
        fig_knowledge = px.bar(
            knowledge_counts, 
            x="Niveau connaissance", 
            y="count", 
            text="count",
            color="Niveau connaissance",
            template="plotly_white"
        )
        st.plotly_chart(fig_knowledge, use_container_width=True)
        
        # 2. Plateformes de DeepFakes
        st.subheader("Plateformes o√π les DeepFakes sont vus")
        if "Plateformes" in filtered_df.columns:
            platform_series = filtered_df["Plateformes"].dropna().str.split(';')
            platform_flat = [item.strip() for sublist in platform_series for item in sublist]
            platform_counts = pd.Series(platform_flat).value_counts().reset_index()
            fig_platforms = px.pie(
            platform_counts, 
                names='index', 
                values='count',
                hole=0.3,
                labels={'index': 'Plateforme', 'count': 'Occurrences'},
                color_discrete_sequence=px.colors.qualitative.Alphabet
        )

            st.plotly_chart(fig_platforms, use_container_width=True)
        
        # 3. Impact per√ßu
        st.subheader("Impact per√ßu des DeepFakes")
        impact_counts = filtered_df["Impact soci√©t√©"].value_counts().reset_index()
        fig_impact = px.bar(
            impact_counts,
            x="Impact soci√©t√©",
            y="count",
            text="count",
            color="Impact soci√©t√©",
            color_discrete_sequence=px.colors.qualitative.D3
        )
        st.plotly_chart(fig_impact, use_container_width=True)
        
        # 4. Analyse crois√©e
        st.subheader("Analyse Crois√©e")
        
        # Confiance par tranche d'√¢ge
        st.markdown("**Confiance par Tranche d'√¢ge**")
        trust_age = filtered_df.groupby("Tranche d'√¢ge")["Confiance r√©seaux sociaux"].value_counts(normalize=True).unstack() * 100
        fig_trust_age = px.bar(
            trust_age,
            barmode="group",
            labels={'value': 'Pourcentage', 'variable': 'Confiance'},
            height=500,
            color_discrete_sequence=px.colors.qualitative.Plotly
        )
        st.plotly_chart(fig_trust_age, use_container_width=True)
        
        # =============================================
        # VISUALISATION GENRE VS PLATEFORMES (ONGLET 1 SEULEMENT)
        # =============================================
        st.header("üë• Genre vs Plateformes (Am√©lior√©)")
        
        if "Plateformes" in filtered_df.columns:
            # Expansion des plateformes
            platform_series = filtered_df[["Plateformes", "Genre"]].dropna()
            platform_series["Plateformes"] = platform_series["Plateformes"].str.split(';')
            platform_exploded = platform_series.explode("Plateformes").dropna()
            platform_exploded["Plateformes"] = platform_exploded["Plateformes"].str.strip()
            
            # Table de contingence
            cross_tab = pd.crosstab(
                platform_exploded["Genre"],
                platform_exploded["Plateformes"]
            )
            
            # Heatmap am√©lior√©e
            fig = px.imshow(
                cross_tab,
                text_auto=True,
                aspect="auto",
                color_continuous_scale='Blues',
                height=600
            )
            fig.update_layout(
                xaxis_title="Plateformes",
                yaxis_title="Genre",
                margin=dict(t=50, b=100)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("La colonne 'Plateformes' n'est pas disponible")

        # =============================================
        # MATRICE DE CORRELATION (ONGLET 1 SEULEMENT)
        # =============================================
        st.header("üîó Matrice de Corr√©lation")
        
        # S√©lection des colonnes pertinentes
        selected_cols = [
            "Connaissance DeepFakes",
            "Niveau connaissance", 
            "Confiance r√©seaux sociaux",
            "Impact soci√©t√©",
            "Tranche d'√¢ge",
            "Genre"
        ]
        
        # V√©rification que les colonnes existent
        if all(col in filtered_df.columns for col in selected_cols):
            df_corr = filtered_df[selected_cols].copy()
            
            # Conversion des cat√©gories en codes num√©riques
            for col in df_corr.columns:
                df_corr[col] = df_corr[col].astype('category').cat.codes
            
            # Calcul de la matrice de corr√©lation
            corr_matrix = df_corr.corr()
            
            # Labels courts pour les axes
            short_labels = {
                "Connaissance DeepFakes": "Connaissance DF",
                "Niveau connaissance": "Niveau Connaissance",
                "Confiance r√©seaux sociaux": "Confiance RS",
                "Impact soci√©t√©": "Impact Soci√©t√©",
                "Tranche d'√¢ge": "√Çge",
                "Genre": "Genre"
            }
            
            # Visualisation avec Plotly
            fig_corr = px.imshow(
                corr_matrix,
                text_auto=True,
                color_continuous_scale='RdBu',
                zmin=-1,
                zmax=1,
                labels=dict(color="Corr√©lation"),
                x=[short_labels.get(col, col) for col in corr_matrix.columns],
                y=[short_labels.get(col, col) for col in corr_matrix.index],
                aspect="auto",
                title="Matrice de Corr√©lation (Variables Pertinentes)"
            )
            
            fig_corr.update_layout(
                width=800,
                height=600,
                xaxis_tickangle=-45,
                font=dict(size=12),
                margin=dict(t=50, b=100)
            )
            
            st.plotly_chart(fig_corr, use_container_width=True)
        else:
            st.warning("Certaines colonnes n√©cessaires pour la matrice de corr√©lation sont manquantes")

# =============================================
# FONCTIONS POUR TELECHARGER L'ONGLET 1
# =============================================

def fig_to_image(fig):
    """Convertit une figure Plotly en image PNG"""
    try:
        img_bytes = fig.to_image(format="png", width=1200, height=800, scale=2)
        return Image.open(io.BytesIO(img_bytes))
    except Exception as e:
        st.error(f"Erreur conversion figure: {str(e)}")
        return None

def generate_dashboard_pdf(figures, titles):
    """G√©n√®re un PDF avec toutes les visualisations"""
    try:
        # Cr√©ation d'un buffer en m√©moire pour le PDF
        pdf_buffer = io.BytesIO()
        
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        
        # M√©tadonn√©es du PDF
        pdf.set_title("Dashboard DeepFakes")
        pdf.set_author("Streamlit App")
        
        # Titre principal
        pdf.add_page()
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Tableau de Bord DeepFakes - Onglet 1', 0, 1, 'C')
        pdf.ln(10)
        
        # Ajout des visualisations avec leurs titres
        for i, (fig, title) in enumerate(zip(figures, titles)):
            if fig is not None:
                # Ajout du titre de la section
                pdf.set_font('Arial', 'B', 12)
                pdf.multi_cell(0, 10, f"{i+1}. {title}")
                pdf.ln(5)
                
                # Sauvegarde temporaire de l'image
                img_path = f"temp_{uuid.uuid4()}.png"
                fig.save(img_path)
                
                # Ajout de l'image au PDF
                pdf.image(img_path, x=10, w=190)
                pdf.ln(10)
                
                # Suppression du fichier temporaire
                try:
                    os.remove(img_path)
                except:
                    pass
        
        # Pied de page
        pdf.set_font('Arial', 'I', 8)
        pdf.cell(0, 10, f"G√©n√©r√© le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 0, 'C')
        
        # √âcriture directe dans le buffer
        output_data = pdf.output(dest='S')
        if isinstance(output_data, (bytes, bytearray)):
            pdf_buffer.write(output_data)
        else:
            pdf_buffer.write(output_data.encode('latin1'))
            pdf_buffer.seek(0)
        
        return pdf_buffer.getvalue()
    
    except Exception as e:
        st.error(f"Erreur g√©n√©ration PDF: {str(e)}")
        return None

# =============================================
# TELECHARGER TOUT L'ONGLET 1 (IMPLEMENTATION FINALE)
# =============================================
with tab1:
    if not filtered_df.empty:
        # Titres des sections
        section_titles = [
            "Niveau de Connaissance des DeepFakes",
            "Plateformes o√π les DeepFakes sont vus",
            "Impact per√ßu des DeepFakes",
            "Confiance par Tranche d'√¢ge",
            "Genre vs Plateformes",
            "Matrice de Corr√©lation"
        ]
        
        # Figures correspondantes
        figures_to_export = [
            fig_knowledge,
            fig_platforms,
            fig_impact,
            fig_trust_age,
            fig,        # heatmap Genre x Plateformes
            fig_corr    # matrice de corr√©lation
        ]
        
        # V√©rification des figures disponibles
        available_figures = [f for f in figures_to_export if f is not None]
        
        if st.button("üì• T√©l√©charger tout le Tableau de Bord en PDF"):
            if len(available_figures) == 0:
                st.warning("Aucune visualisation disponible √† exporter")
            else:
                with st.spinner("G√©n√©ration du PDF en cours..."):
                    # Convertir les figures en images
                    images = []
                    for fig in available_figures:
                        img = fig_to_image(fig)
                        if img is not None:
                            images.append(img)
                    
                    if images:
                        # G√©n√©rer le PDF
                        pdf_bytes = generate_dashboard_pdf(images, section_titles[:len(images)])
                        
                        if pdf_bytes:
                            # Proposer le t√©l√©chargement
                            st.download_button(
                                label="‚¨áÔ∏è T√©l√©charger le PDF",
                                data=pdf_bytes,
                                file_name="dashboard_deepfakes.pdf",
                                mime="application/pdf",
                                key="download_pdf"
                            )

# =============================================
# ONGLET 2 - EXPLORATION AVANC√âE
# =============================================
with tab2:
    st.header("‚öñÔ∏è M√©thodologie & Validit√© Scientifique")
    
    # Section de configuration avanc√©e
    with st.expander("‚öôÔ∏è Param√®tres Avanc√©s", expanded=True):
        col_config1, col_config2, col_config3 = st.columns(3)
        
        # Colonnes cat√©gorielles disponibles
        categorical_columns = [col for col in df.select_dtypes(include='object').columns 
                             if df[col].nunique() <= 15 and col in df.columns]
        
        with col_config1:
            x_axis = st.selectbox(
                "Axe X (Cat√©gorie principale)", 
                options=categorical_columns, 
                index=categorical_columns.index("Connaissance DeepFakes") if "Connaissance DeepFakes" in categorical_columns else 0,
                help="Variable pour l'axe horizontal"
            )
        
        with col_config2:
            y_axis = st.selectbox(
                "Axe Y (Sous-cat√©gorie)", 
                options=categorical_columns, 
                index=categorical_columns.index("Exposition DeepFakes") if "Exposition DeepFakes" in categorical_columns else 1,
                help="Variable pour segmenter les donn√©es"
            )
        
        with col_config3:
            color_by = st.selectbox(
                "Couleur (D√©tail)", 
                options=categorical_columns, 
                index=categorical_columns.index("Genre") if "Genre" in categorical_columns else 2,
                help="Variable pour le codage couleur"
            )
        
        # Options suppl√©mentaires
        st.markdown("---")
        col_opt1, col_opt2, col_opt3 = st.columns(3)
        
        with col_opt1:
            chart_type = st.selectbox(
                "Type de visualisation :",
                options=["Barres", "Sunburst", "Treemap", "Heatmap", "R√©seau"],
                index=0,
                help="Choisissez le type de graphique"
            )
            
        with col_opt2:
            show_percentage = st.checkbox(
                "Afficher les pourcentages", 
                True,
                help="Convertir les counts en pourcentages"
            )
            
        with col_opt3:
            min_count = st.slider(
                "Filtre count minimum", 
                min_value=1, 
                max_value=50, 
                value=5,
                help="Exclure les cat√©gories trop petites"
            )
    
    # Pr√©paration des donn√©es
    if not filtered_df.empty:
        filtered_data = filtered_df[[x_axis, y_axis, color_by]].dropna()
        cross_data = filtered_data.groupby([x_axis, y_axis, color_by]).size().reset_index(name='Count')
        
        # Application du filtre minimum
        cross_data = cross_data[cross_data['Count'] >= min_count]
        
        # Conversion en pourcentages si demand√©
        if show_percentage:
            total = cross_data['Count'].sum()
            cross_data['Count'] = (cross_data['Count'] / total * 100).round(1)
    
    # Section d'analyse statistique
    with st.expander("üìä Analyse Statistique", expanded=False):
        if not filtered_df.empty:
            contingency_table = pd.crosstab(filtered_df[x_axis], filtered_df[y_axis])
            
            if contingency_table.size > 0:
                chi2, p, dof, expected = chi2_contingency(contingency_table)
                cramers_v = calculate_cramers_v(contingency_table)
                
                st.markdown(f"""
                **Test du Chi2 d'ind√©pendance**
                - p-value = `{p:.4f}`  
                - Degr√©s de libert√© = `{dof}`  
                - Significatif √† 5%? `{"‚úÖ Oui" if p < 0.05 else "‚ùå Non"}`  
                - Coefficient Cramer's V = `{cramers_v:.3f}`
                """)
            else:
                st.warning("Table de contingence trop petite pour l'analyse")
        else:
            st.warning("Aucune donn√©e disponible pour l'analyse")
    
    # Visualisation dynamique
    if not filtered_df.empty:
        with st.spinner("G√©n√©ration de la visualisation..."):
            try:
                if chart_type == "Barres":
                    # Pr√©paration des libell√©s
                    cross_data[x_axis] = cross_data[x_axis].apply(truncate_label)
                    cross_data[y_axis] = cross_data[y_axis].apply(truncate_label)
                    cross_data[color_by] = cross_data[color_by].apply(truncate_label)
                    
                    fig = px.bar(
                        cross_data,
                        x=x_axis,
                        y='Count',
                        color=color_by,
                        barmode='group',
                        text='Count',
                        facet_col=y_axis,
                        title=f"<b>{x_axis} vs {y_axis} par {color_by}</b>",
                        labels={'Count': "Nombre" if not show_percentage else "Pourcentage"},
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    
                    fig.update_layout(
                        height=600,
                        width=max(800, len(cross_data)*20),
                        xaxis_tickangle=-45,
                        yaxis_title="Nombre" if not show_percentage else "Pourcentage (%)",
                        legend_title=color_by,
                        margin=dict(t=100)
                    )
                    
                    fig.update_traces(
                        textposition='outside',
                        texttemplate='%{text}' + ('%' if show_percentage else '')
                    )
                
                elif chart_type == "Sunburst":
                    fig = px.sunburst(
                        cross_data,
                        path=[x_axis, y_axis, color_by],
                        values='Count',
                        title=f"<b>Hi√©rarchie: {x_axis} > {y_axis} > {color_by}</b>",
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    
                    fig.update_traces(
                        textinfo="label+percent parent",
                        hovertemplate="<b>%{label}</b><br>" + 
                                     ("Count: %{value}<br>" if not show_percentage else "Pourcentage: %{value}%<br>") + 
                                     "%{percentParent:.1%} of parent"
                    )
                
                elif chart_type == "Treemap":
                    fig = px.treemap(
                        cross_data,
                        path=[x_axis, y_axis, color_by],
                        values='Count',
                        title=f"<b>R√©partition: {x_axis} > {y_axis} > {color_by}</b>",
                        color_discrete_sequence=px.colors.qualitative.Pastel
                    )
                    
                    fig.update_traces(
                        textinfo="label+value+percent parent",
                        texttemplate="<b>%{label}</b><br>" + 
                                    ("%{value}" if not show_percentage else "%{value}%") + 
                                    "<br>%{percentParent:.1%}"
                    )
                
                elif chart_type == "Heatmap":
                    pivot_data = cross_data.pivot_table(
                        index=x_axis,
                        columns=y_axis,
                        values='Count',
                        aggfunc='sum',
                        fill_value=0
                    )
                    
                    fig = px.imshow(
                        pivot_data,
                        labels=dict(x=y_axis, y=x_axis, color="Count"),
                        title=f"<b>Heatmap: {x_axis} vs {y_axis}</b>",
                        aspect="auto",
                        color_continuous_scale='Blues',
                        text_auto=True
                    )
                
                elif chart_type == "R√©seau":
                    # Cr√©ation du graphique r√©seau
                    G = nx.from_pandas_edgelist(
                        cross_data, 
                        source=x_axis, 
                        target=y_axis, 
                        edge_attr='Count'
                    )
                    
                    pos = nx.spring_layout(G)
                    edge_x = []
                    edge_y = []
                    for edge in G.edges():
                        x0, y0 = pos[edge[0]]
                        x1, y1 = pos[edge[1]]
                        edge_x.extend([x0, x1, None])
                        edge_y.extend([y0, y1, None])
                    
                    edge_trace = go.Scatter(
                        x=edge_x, y=edge_y,
                        line=dict(width=0.5, color='#888'),
                        hoverinfo='none',
                        mode='lines'
                    )
                    
                    node_x = []
                    node_y = []
                    for node in G.nodes():
                        x, y = pos[node]
                        node_x.append(x)
                        node_y.append(y)
                    
                    node_trace = go.Scatter(
                        x=node_x, y=node_y,
                        mode='markers+text',
                        hoverinfo='text',
                        marker=dict(
                            showscale=True,
                            colorscale='YlGnBu',
                            size=10,
                            colorbar=dict(
                                thickness=15,
                                title='Connections',
                                xanchor='left',
                                titleside='right'
                            )
                        )
                    )
                    
                    fig = go.Figure(
                        data=[edge_trace, node_trace],
                        layout=go.Layout(
                            title=f'<br>R√©seau: {x_axis} ‚Üî {y_axis}',
                            showlegend=False,
                            hovermode='closest',
                            margin=dict(b=20,l=5,r=5,t=40),
                            xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                            yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)
                        )
                    )
                
                # Affichage du graphique
                st.plotly_chart(fig, use_container_width=True)
                pdf_buffer = io.BytesIO()
                fig.write_image(pdf_buffer, format="pdf")
                pdf_buffer.seek(0)
                
                # Options d'export
                st.markdown("---")
                col_export1, col_export2 = st.columns(2)
                
                with col_export1:
                    st.download_button(
                        label="üíæ T√©l√©charger le graphique en PDF",
                        data=pdf_buffer,
                        file_name="graphique_plotly.pdf",
                        mime="application/pdf"
                    )

                
                with col_export2:
                    st.download_button(
                        label="üìÑ T√©l√©charger les donn√©es",
                        data=cross_data.to_csv(index=False),
                        file_name="donnees_croisees.csv",
                        mime="text/csv"
                    )
                
            except Exception as e:
                st.error(f"Erreur lors de la g√©n√©ration du graphique : {str(e)}")
                st.warning("Veuillez s√©lectionner des combinaisons de variables compatibles")



    # =============================================
    # SECTION 1 : DESCRIPTION DE L'√âCHANTILLON
    # =============================================
    with st.expander("üìä Caract√©ristiques de l'√©chantillon", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("<div class='metric-card'>üìè <b>Taille</b><br>"
                        f"<span style='font-size:24px'>{len(df)} r√©pondants</span></div>", 
                        unsafe_allow_html=True)
            
        with col2:
            mode_recrutement = "Volontariat en ligne"
            st.markdown("<div class='metric-card'>üéØ <b>Recrutement</b><br>"
                        f"<span style='font-size:16px'>{mode_recrutement}</span></div>", 
                        unsafe_allow_html=True)
            
        with col3:
            duree_enquete = (pd.to_datetime(df['Date de saisie']).max() - 
                            pd.to_datetime(df['Date de saisie']).min()).days +1
            st.markdown("<div class='metric-card'>‚è± <b>Dur√©e</b><br>"
                        f"<span style='font-size:24px'>{duree_enquete} jours</span></div>", 
                        unsafe_allow_html=True)

        # Distribution d√©mographique
        st.subheader("R√©partition d√©mographique")
        demo_col1, demo_col2 = st.columns(2)
        
        with demo_col1:
            fig_age = px.pie(df, names="Tranche d'√¢ge", title="Distribution par √¢ge",
                            color_discrete_sequence=px.colors.sequential.RdBu)
            st.plotly_chart(fig_age, use_container_width=True)
            
        with demo_col2:
            fig_genre = px.pie(df, names="Genre", title="R√©partition par genre",
                              color_discrete_sequence=px.colors.qualitative.Pastel)
            st.plotly_chart(fig_genre, use_container_width=True)

    # =============================================
    # SECTION 2 : REPR√âSENTATIVIT√â
    # =============================================
    with st.expander("üßÆ Analyse de repr√©sentativit√©", expanded=True):
        st.subheader("Test de repr√©sentativit√©")
        
        # Charger les donn√©es INSEE (exemple simplifi√©)
        insee_data = {
            "Tranche d'√¢ge": ["18-25", "26-40", "41-60", "60+"],
            "Population (%)": [22, 35, 30, 13]
        }
        df_insee = pd.DataFrame(insee_data)
        
        # Calcul des √©carts
        df_compare = df["Tranche d'√¢ge"].value_counts(normalize=True).reset_index()
        df_compare.columns = ["Tranche d'√¢ge", "√âchantillon (%)"]
        df_compare = df_compare.merge(df_insee, on="Tranche d'√¢ge", how="left")
        df_compare["√âcart (%)"] = df_compare["√âchantillon (%)"] - df_compare["Population (%)"]
        
        # Visualisation comparative
        fig_comp = go.Figure()
        fig_comp.add_trace(go.Bar(
            x=df_compare["Tranche d'√¢ge"],
            y=df_compare["√âchantillon (%)"],
            name='Notre √©chantillon',
            marker_color='#1f77b4'
        ))
        fig_comp.add_trace(go.Bar(
            x=df_compare["Tranche d'√¢ge"],
            y=df_compare["Population (%)"],
            name='Population INSEE',
            marker_color='#ff7f0e'
        ))
        fig_comp.update_layout(barmode='group', title="Comparaison avec les donn√©es INSEE")
        st.plotly_chart(fig_comp, use_container_width=True)
        
        # Test du Chi2
        st.markdown("**Test d'ad√©quation du Chi¬≤**")
        from scipy.stats import chisquare
        observed = df_compare["√âchantillon (%)"].values * len(df) / 100
        expected = df_compare["Population (%)"].values * len(df) / 100
        chi2, p = chisquare(f_obs=observed, f_exp=expected)
        
        st.markdown(f"""
        <div class='stat-test'>
        œá¬≤ = {chi2:.3f}<br>
        p-value = {p:.4f}<br>
        <b>Conclusion</b> : {"L'√©chantillon est repr√©sentatif" if p > 0.05 else "Biais de repr√©sentativit√© d√©tect√©"}
        </div>
        """, unsafe_allow_html=True)

    # =============================================
    # SECTION 3 : INTERVALLES DE CONFIANCE
    # =============================================
    with st.expander("üì∂ Pr√©cision des estimations", expanded=True):
        st.subheader("Intervalles de confiance (bootstrap)")
        
        # Param√®tres
        col_var, col_level = st.columns(2)
        with col_var:
            target_var = st.selectbox("Variable d'int√©r√™t", 
                                    ["Connaissance DeepFakes", "Exposition DeepFakes"])
        with col_level:
            conf_level = st.slider("Niveau de confiance", 90, 99, 95)
        
        # Bootstrap
        def bootstrap_ci(data, n_bootstrap=1000):
            means = []
            for _ in range(n_bootstrap):
                sample = np.random.choice(data, size=len(data), replace=True)
                means.append(np.mean(sample == "Oui"))
            return np.percentile(means, [(100-conf_level)/2, 100-(100-conf_level)/2])
        
        ci_low, ci_high = bootstrap_ci(df[target_var])
        true_prop = (df[target_var] == "Oui").mean()
        
        # Visualisation
        fig_ci = go.Figure()
        fig_ci.add_trace(go.Indicator(
            mode="number+gauge",
            value=true_prop * 100,
            number={"suffix": "%"},
            domain={"x": [0.1, 1], "y": [0, 1]},
            gauge={
                "shape": "bullet",
                "axis": {"range": [0, 100]},
                "threshold": {
                    "line": {"color": "red", "width": 2},
                    "thickness": 0.75,
                    "value": true_prop * 100},
                "steps": [
                    {"range": [0, ci_low*100], "color": "lightgray"},
                    {"range": [ci_low*100, ci_high*100], "color": "gray"}],
                "bar": {"color": "black"}
            }))
        fig_ci.update_layout(title=f"Intervalle de confiance {conf_level}% pour {target_var}")
        st.plotly_chart(fig_ci, use_container_width=True)
        
        st.markdown(f"""
        La proportion r√©elle est de **{true_prop*100:.1f}%**  
        Intervalle de confiance : **[{ci_low*100:.1f}% - {ci_high*100:.1f}%]**
        """)

    # =============================================
    # SECTION 4 : ANALYSE DES BIAIS
    # =============================================
    with st.expander("‚ö†Ô∏è Diagnostic des biais", expanded=True):
        st.subheader("Carte des biais potentiels")

        biases = {
            "Biais de s√©lection": {
                "Description": "Sur-repr√©sentation des internautes avertis",
                "Impact": "Mod√©r√©",
                "Correctif": "Pond√©ration par calage"
            },
            "Biais de non-r√©ponse": {
                "Description": "Abandon apr√®s visualisation des questions complexes",
                "Impact": "Faible",
                "Correctif": "Analyse des r√©pondants partiels"
            },
            "Biais de d√©sirabilit√©": {
                "Description": "Sous-d√©claration des comportements risqu√©s",
                "Impact": "√âlev√©",
                "Correctif": "Donn√©es anonymis√©es"
            }
        }

        # Matrice d'√©valuation
        df_biases = pd.DataFrame(biases).T.reset_index()
        df_biases.columns = ["Type de biais", "Description", "Impact", "Correctif"]

        # Appliquer des attributs HTML personnalis√©s pour la colonne 'Impact'
        def add_data_attr(val):
            return f'data-impact="{val}"'

        styled_biases = df_biases.style.set_td_classes(
            df_biases[['Impact']].applymap(add_data_attr)
        )

        st.dataframe(
            styled_biases,
            hide_index=True,
            use_container_width=True
        )

        # Diagramme radar des risques

        fig_radar = go.Figure()
        fig_radar.add_trace(go.Scatterpolar(
            r=[3, 2, 1],  # Scores d'impact fictifs
            theta=list(biases.keys()),
            fill='toself',
            name='Impact des biais'
        ))
        fig_radar.update_layout(
            polar=dict(
                bgcolor="#ffffff",
                radialaxis=dict(
                    visible=True,
                    range=[0, 4],
                    color="#2c3e50",
                    gridcolor="#d0d0d0",
                    linecolor="#999999"
                ),
                angularaxis=dict(
                    color="white",
                    gridcolor="#d0d0d0",
                    linecolor="#999999"
                )
            ),
            font=dict(color="#2c3e50"),
            title=dict(
                text="Cartographie des biais par niveau d'impact",
                font=dict(color="white", size=20)
            )
        )

        st.plotly_chart(fig_radar, use_container_width=True)

    # =============================================
    # SECTION 5 : CONCLUSION M√âTHODOLOGIQUE
    # =============================================
    with st.container(border=True):
        st.subheader("üîé Conclusion sur la validit√©")
        
        # Score global de validit√©
        validity_score = 78  # Exemple de calcul composite
        
        st.markdown(f"""
            <div style="
            background-color: #ffffff10;
            border: 1px solid rgba(255,255,255,0.1);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 10px rgba(0,0,0,0.15);
            color: #ecf0f1;
                            ">
            <h3 style="color: #ecf0f1;">Validit√© scientifique globale : {validity_score}/100</h3>
        <div style="margin-top: 10px; font-size: 0.95rem;">
            <p><b>Points forts :</b> Taille suffisante (n>={len(df)}), IC serr√©s, tests significatifs</p>
            <p><b>Limites :</b> Biais de s√©lection, couverture g√©ographique limit√©e</p>
            <p><b>G√©n√©ralisation :</b> Possible avec pond√©ration pour les √©tudes descriptives</p>
        </div>
</div>
""", unsafe_allow_html=True)


# =============================================
# ONGLET 3 : ANALYSE STATISTIQUE & REGRESSION
# =============================================


def run_tab3(filtered_df):
    st.header("üìà Analyse Statistique Avanc√©e")
    
    # Section 1: Bootstrap Confidence Intervals
    with st.expander("üîé Intervalle de Confiance par Bootstrap", expanded=True):
        st.subheader("Estimation par Bootstrap")
        
        if "Confiance r√©seaux sociaux" in filtered_df.columns:
            # Convert to binary
            confiance_series = filtered_df["Confiance r√©seaux sociaux"].apply(
                lambda x: 1 if str(x).strip().lower() == 'oui' else 0
            ).dropna()
            
            # Bootstrap
            bootstrap_means = [
                resample(confiance_series, replace=True).mean() 
                for _ in range(1000)
            ]
            
            # Metrics
            mean_estimate = np.mean(bootstrap_means) * 100
            ci_lower = np.percentile(bootstrap_means, 2.5) * 100
            ci_upper = np.percentile(bootstrap_means, 97.5) * 100
            
            # Visualization
            fig = px.histogram(
                x=bootstrap_means,
                nbins=50,
                labels={'x': 'Proportion de confiance', 'y': 'Fr√©quence'},
                title="Distribution Bootstrap de la Confiance"
            )
            fig.add_vline(x=mean_estimate/100, line_dash="dash", line_color="red")
            fig.add_vline(x=ci_lower/100, line_color="green")
            fig.add_vline(x=ci_upper/100, line_color="green")
            st.plotly_chart(fig, use_container_width=True)
            
            # Metrics display
            col1, col2, col3 = st.columns(3)
            col1.metric("Estimation Moyenne", f"{mean_estimate:.1f}%")
            col2.metric("IC 95% Inf√©rieur", f"{ci_lower:.1f}%")
            col3.metric("IC 95% Sup√©rieur", f"{ci_upper:.1f}%")
        else:
            st.warning("La colonne 'Confiance r√©seaux sociaux' est manquante")

    # Section 2: Logistic Regression
    with st.expander("üßÆ Mod√©lisation par R√©gression Logistique", expanded=True):
        st.subheader("Pr√©dicteurs de la Confiance")
        
        # Prepare data
        target_col = "Confiance r√©seaux sociaux"
        features = [
            "Tranche d'√¢ge", "Genre", "Niveau connaissance", 
            "Exposition DeepFakes", "Impact soci√©t√©"
        ]
        
        # Filter and clean
        df_model = filtered_df[[target_col] + features].dropna()
        df_model["target"] = df_model[target_col].apply(
            lambda x: 1 if str(x).strip().lower() == 'oui' else 0
        )
        
        if len(df_model) > 50:  # Minimum sample size
            X = df_model[features]
            y = df_model["target"]
            
            # Preprocessing pipeline
            categorical_features = features
            preprocessor = ColumnTransformer(
                transformers=[
                    ('cat', OneHotEncoder(drop='first'), categorical_features)
                ],
                remainder='passthrough'
            )
            
            # Model pipeline
            model = Pipeline([
                ('preprocessor', preprocessor),
                ('classifier', LogisticRegression(max_iter=1000))
            ])
            
            # Train-test split
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.3, random_state=42
            )
            
            # Fit model
            model.fit(X_train, y_train)
            
            # Model evaluation
            st.subheader("Performance du Mod√®le")
            
            # Metrics
            y_pred = model.predict(X_test)
            y_proba = model.predict_proba(X_test)[:, 1]
            auc = roc_auc_score(y_test, y_proba)
            
            col1, col2 = st.columns(2)
            col1.metric("AUC-ROC", f"{auc:.3f}")
            col2.metric("Exactitude", f"{model.score(X_test, y_test):.2f}")
            
            # Confusion matrix
            st.subheader("Matrice de Confusion")
            cm = confusion_matrix(y_test, y_pred)
            fig_cm = px.imshow(
                cm,
                labels=dict(x="Pr√©dit", y="R√©el", color="Count"),
                x=['Non', 'Oui'],
                y=['Non', 'Oui'],
                text_auto=True
            )
            st.plotly_chart(fig_cm, use_container_width=True)
            
            # ROC Curve
            st.subheader("Courbe ROC")
            fpr, tpr, _ = roc_curve(y_test, y_proba)
            fig_roc = px.area(
                x=fpr, y=tpr,
                labels=dict(x="Taux Faux Positifs", y="Taux Vrais Positifs"),
                title=f"Courbe ROC (AUC = {auc:.3f})"
            )
            fig_roc.add_shape(type='line', line=dict(dash='dash'), x0=0, x1=1, y0=0, y1=1)
            st.plotly_chart(fig_roc, use_container_width=True)
            
            # Feature importance
            st.subheader("Importance des Variables")
            try:
                # Get feature names after one-hot encoding
                feature_names = model.named_steps['preprocessor'].transformers_[0][1].get_feature_names_out(input_features=features)
                
                # SHAP values
                explainer = shap.Explainer(
                    model.named_steps['classifier'], 
                    model.named_steps['preprocessor'].transform(X_train)
                )
                shap_values = explainer.shap_values(model.named_steps['preprocessor'].transform(X_test))
                
                # Summary plot
                fig_shap = go.Figure()
                for i, name in enumerate(feature_names):
                    fig_shap.add_trace(go.Box(
                        y=shap_values[:, i],
                        name=name,
                        boxpoints=False
                    ))
                fig_shap.update_layout(
                    title="Impact des Variables (SHAP Values)",
                    yaxis_title="Valeur SHAP",
                    showlegend=False
                )
                st.plotly_chart(fig_shap, use_container_width=True)
                
            except Exception as e:
                st.warning(f"SHAP non disponible : {str(e)}")

                # R√©cup√©ration des noms de variables apr√®s transformation + s√©lection
                feature_names_raw = model.named_steps['preprocessor'].transformers_[0][1].get_feature_names_out(input_features=features)
                selected_mask = model.named_steps['feature_selection'].get_support()
                selected_features = feature_names_raw[selected_mask]

                # Cr√©ation du DataFrame des coefficients
                coefs = pd.DataFrame({
                    'Variable': selected_features,
                    'Coefficient': model.named_steps['classifier'].coef_[0]
                }).sort_values('Coefficient', ascending=False)

                # Affichage des coefficients sous forme de graphique
                fig_coef = px.bar(
                    coefs,
                    x='Coefficient',
                    y='Variable',
                    orientation='h',
                    title="Coefficients de R√©gression"
                )
                st.plotly_chart(fig_coef, use_container_width=True)

            # Model interpretation
            st.subheader("Interpr√©tation du Mod√®le")
            st.markdown("""
            - **Coefficients positifs** : Augmentent la probabilit√© de confiance
            - **Coefficients n√©gatifs** : Diminuent la probabilit√© de confiance
            """)
            
            # Export model
            #st.download_button(
                #label="üì• T√©l√©charger les coefficients",
                #data=coefs.to_csv(index=False),
                #file_name="coefficients_regression.csv",
                #mime="text/csv"
            #)
            
        else:
            st.warning("√âchantillon trop petit pour la mod√©lisation (n < 50)")

    # Section 3: Advanced Diagnostics
    with st.expander("üîç Diagnostics Avanc√©s", expanded=False):
        st.subheader("Validation du Mod√®le")
        
        if len(df_model) > 50:
            # VIF Analysis
            st.markdown("**Analyse de Multicolin√©arit√© (VIF)**")
            try:
                # Get design matrix
                X_design = model.named_steps['preprocessor'].transform(X)
                
                # Calculate VIF
                vif_data = pd.DataFrame()
                vif_data["Variable"] = feature_names
                vif_data["VIF"] = [variance_inflation_factor(X_design, i) 
                                   for i in range(X_design.shape[1])]
                
                st.dataframe(
                    vif_data.style.applymap(
                        lambda x: 'background-color: yellow' if x > 5 else ''
                    ),
                    height=300
                )
                st.markdown("> Un VIF > 5 indique une possible multicolin√©arit√©")
                
            except Exception as e:
                st.error(f"Erreur VIF : {str(e)}")
            
            # Precision-Recall Curve
            st.subheader("Courbe Precision-Rappel")
            precision, recall, _ = precision_recall_curve(y_test, y_proba)
            fig_pr = px.line(
                x=recall, y=precision,
                labels=dict(x="Rappel", y="Pr√©cision"),
                title="Courbe Precision-Rappel"
            )
            st.plotly_chart(fig_pr, use_container_width=True)

# Example usage in your Streamlit app:
# In your main app where you have tabs:
with tab3:
     run_tab3(filtered_df)


# =============================================
# SECTION COMMENTAIRES
# =============================================

# =============================================
# CONFIGURATION
# =============================================
COMMENTS_FILE = "comments_advanced.csv"

# =============================================
# API GOOGLE
# =============================================
def connect_to_gsheet():
    scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds_dict = st.secrets["GSHEET_CREDS"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
    client = gspread.authorize(creds)
    sheet = client.open("user").worksheet("user_data")
    return sheet

def load_users():
    sheet = connect_to_gsheet()
    data = sheet.get_all_records()
    return pd.DataFrame(data) if data else pd.DataFrame(columns=["id", "pseudo", "password"])

def save_user(pseudo, password):
    sheet = connect_to_gsheet()
    existing_users = sheet.get_all_records()
    next_id = len(existing_users) + 1
    sheet.append_row([next_id, pseudo, password])

def get_comments_sheet():
    sheet = connect_to_gsheet()
    return sheet.spreadsheet.worksheet("comments_data")

def load_comments():
    sheet = get_comments_sheet()
    data = sheet.get_all_records()
    return pd.DataFrame(data)

def save_comment(user, comment):
    sheet = get_comments_sheet()
    new_row = [str(uuid.uuid4()), user, comment, datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
    sheet.append_row(new_row)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# =============================================
# INITIALISATION SESSION
# =============================================
if 'user_logged_in' not in st.session_state:
    st.session_state.user_logged_in = False

# =============================================
# SIDEBAR : CONNEXION / INSCRIPTION
# =============================================
def handle_auth():
    st.sidebar.header("üîê Connexion rapide")
    mode = st.sidebar.radio("Choisissez une option :", ["Se connecter", "S'inscrire"])

    with st.sidebar.form(key="auth_form"):
        pseudo = st.text_input("Votre pseudo").strip()
        password = st.text_input("Mot de passe", type="password")
        submit = st.form_submit_button("Valider")

        forbidden_pseudos = {"admin", "root", "support", "moderator","cacaboudin"}

        if submit:
            if not pseudo or not password:
                st.sidebar.error("Veuillez remplir tous les champs.")
            elif not pseudo.isalnum():
                st.sidebar.error("Le pseudo ne doit contenir que des lettres et des chiffres.")
            elif len(pseudo) < 3 or len(pseudo) > 20:
                st.sidebar.error("Le pseudo doit contenir entre 3 et 20 caract√®res.")
            elif pseudo.lower() in forbidden_pseudos:
                st.sidebar.error("Ce pseudo est r√©serv√©.")
            elif len(password) < 7:
                st.sidebar.error("Le mot de passe doit contenir au moins 7 caract√®res.")
            else:
                users_df = load_users()
                existing_pseudos_lower = users_df['pseudo'].str.lower()
                hashed_pwd = hash_password(password)

                if mode == "Se connecter":
                    if pseudo.lower() in existing_pseudos_lower.values:
                        user_row = users_df.loc[existing_pseudos_lower == pseudo.lower()].iloc[0]
                        if user_row['password'] == hashed_pwd:
                            st.session_state.user_logged_in = True
                            st.session_state.user_name = user_row['pseudo']
                            st.success(f"Bienvenue {user_row['pseudo']} !")
                            st.experimental_rerun()
                        else:
                            st.sidebar.error("Mot de passe incorrect.")
                    else:
                        st.sidebar.error("Utilisateur inconnu.")

                elif mode == "S'inscrire":
                    if pseudo.lower() in existing_pseudos_lower.values:
                        st.sidebar.error("Ce pseudo est d√©j√† utilis√©.")
                    else:
                        save_user(pseudo, hashed_pwd)
                        st.success("Inscription r√©ussie, vous √™tes connect√©.")
                        st.session_state.user_logged_in = True
                        st.session_state.user_name = pseudo
                        st.experimental_rerun()

    if st.session_state.user_logged_in:
        if st.sidebar.button("Se d√©connecter"):
            for key in ["user_logged_in", "user_name"]:
                if key in st.session_state:
                    del st.session_state[key]
            st.sidebar.success("D√©connect√© avec succ√®s.")
            st.experimental_rerun()

# =============================================
# APPEL CONNEXION
# =============================================
handle_auth()

# =============================================
# SECTION COMMENTAIRES
# =============================================

st.title("üí¨ Espace Commentaires")

# Chargement des commentaires
comments_df = load_comments()

# Fonction pour supprimer un commentaire par ID dans Google Sheets
def delete_comment(comment_id):
    sheet = get_comments_sheet()
    records = sheet.get_all_records()
    for i, row in enumerate(records, start=2):  # Ligne 2 car ligne 1 = en-t√™tes
        if row["id"] == comment_id:
            sheet.delete_rows(i)
            break

# Formulaire d'ajout de commentaire (si connect√©)
if st.session_state.get("user_logged_in", False):
    with st.form(key="comment_form", clear_on_submit=True):
        comment_text = st.text_area("Votre commentaire")
        submit_comment = st.form_submit_button("üì§ Envoyer")

        if submit_comment:
            if not comment_text:
                st.warning("Merci de remplir votre commentaire.")
            else:
                save_comment(st.session_state.user_name, comment_text.strip())
                st.success("Commentaire enregistr√©!")
                st.experimental_rerun()
else:
    st.info("üîí Connectez-vous pour pouvoir laisser un commentaire.")

# Affichage des derniers commentaires
st.subheader("üìù Derniers commentaires")

if comments_df.empty:
    st.info("Aucun commentaire pour le moment.")
else:
    comments_display = comments_df.sort_values("timestamp", ascending=False)
    for idx, row in comments_display.iterrows():
        with st.container(border=True):
            st.markdown(f"**{row['user']}** - *{row['timestamp']}*")
            st.markdown(f"> {row['comment']}")

            # Bouton de suppression (visible seulement pour l'auteur)
            if st.session_state.get("user_logged_in", False) and st.session_state.get("user_name") == row["user"]:
                delete_key = f"delete_{idx}"
                confirm_key = f"confirm_delete_{idx}"

                if st.button("üóëÔ∏è Supprimer", key=delete_key):
                    st.session_state[confirm_key] = True

                if st.session_state.get(confirm_key, False):
                    st.warning("‚ö†Ô∏è Confirmation suppression")
                    if st.button("‚úÖ Oui, supprimer", key=f"confirmed_{idx}"):
                        delete_comment(row["id"])
                        st.success("Commentaire supprim√©.")
                        st.session_state[confirm_key] = False
                        st.experimental_rerun()

# =============================================
# FONCTION POUR GENERER LE RAPPORT D'ANALYSE
# =============================================

def generate_analysis_report(filtered_df):
    """G√©n√®re un PDF avec la d√©marche d'analyse et les r√©sultats"""
    try:
        # Cr√©ation du PDF
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        
        # M√©tadonn√©es
        pdf.set_title("Analyse DeepFakes - R√©sultats")
        pdf.set_author("Dashboard DeepFakes")
        
        # Style
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, 'Analyse des Donn√©es DeepFakes', 0, 1, 'C')
        pdf.ln(10)
        
        # Section 1: D√©marche d'analyse
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, '1. D√©marche d\'analyse des donn√©es', 0, 1)
        pdf.set_font('Arial', '', 12)
        
        methodology_text = """
        Cette analyse s'appuie sur une enqu√™te quantitative men√©e aupr√®s d'un √©chantillon de r√©pondants. 
        La d√©marche m√©thodologique comporte plusieurs √©tapes cl√©s :
        
        1. Collecte des donn√©es via un questionnaire en ligne
        2. Nettoyage et pr√©paration des donn√©es
        3. Analyse descriptive (statistiques, visualisations)
        4. Analyse statistique avanc√©e (tests, mod√©lisation)
        5. Interpr√©tation et validation des r√©sultats
        
        Les m√©thodes utilis√©es incluent :
        - Analyses univari√©es et bivari√©es
        - Tests du Chi2 et coefficients d'association
        - Mod√©lisation par r√©gression logistique
        - Analyse des intervalles de confiance
        """
        pdf.multi_cell(0, 10, methodology_text)
        pdf.ln(10)
        
        # Section 2: Principaux r√©sultats
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, '2. Principaux r√©sultats obtenus', 0, 1)
        pdf.set_font('Arial', '', 12)
        
        # Ajout des indicateurs cl√©s
        if not filtered_df.empty:
            # Calcul des indicateurs
            aware_pct = filtered_df["Connaissance DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            seen_pct = filtered_df["Exposition DeepFakes"].value_counts(normalize=True).get('Oui', 0) * 100
            trust_pct = filtered_df["Confiance r√©seaux sociaux"].apply(lambda x: 1 if x == 'Oui' else 0).mean() * 100
            
            results_text = f"""
            Principaux indicateurs :
            - {aware_pct:.1f}% des r√©pondants ont d√©j√† entendu parler des DeepFakes
            - {seen_pct:.1f}% ont d√©j√† vu un DeepFake sur les r√©seaux sociaux
            - Niveau de confiance moyen dans les r√©seaux sociaux : {trust_pct:.1f}%
            
            Analyses significatives :
            """
            pdf.multi_cell(0, 10, results_text)
            pdf.ln(5)
            
            # Ajout des visualisations principales
            img_paths = []
            
            # 1. Niveau de connaissance
            fig = px.bar(
                filtered_df["Niveau connaissance"].value_counts().reset_index(),
                x="Niveau connaissance",
                y="count",
                title="Niveau de connaissance des DeepFakes"
            )
            img_path = "knowledge_level.png"
            fig.write_image(img_path)
            img_paths.append(img_path)
            pdf.image(img_path, x=10, w=190)
            pdf.ln(5)
            
            # 2. Plateformes
            if "Plateformes" in filtered_df.columns:
                platform_series = filtered_df["Plateformes"].dropna().str.split(';')
                platform_flat = [item.strip() for sublist in platform_series for item in sublist]
                platform_counts = pd.Series(platform_flat).value_counts().reset_index()
                
                fig = px.pie(
                    platform_counts,
                    names='index',
                    values='count',
                    title="Plateformes o√π les DeepFakes sont vus"
                )
                img_path = "platforms.png"
                fig.write_image(img_path)
                img_paths.append(img_path)
                pdf.image(img_path, x=10, w=190)
                pdf.ln(5)
            
            # 3. Impact
            fig = px.bar(
                filtered_df["Impact soci√©t√©"].value_counts().reset_index(),
                x="Impact soci√©t√©",
                y="count",
                title="Impact per√ßu des DeepFakes"
            )
            img_path = "impact.png"
            fig.write_image(img_path)
            img_paths.append(img_path)
            pdf.image(img_path, x=10, w=190)
            
            # Nettoyage des images temporaires
            for path in img_paths:
                try:
                    os.remove(path)
                except:
                    pass
            
            # Conclusion
            pdf.add_page()
            pdf.set_font('Arial', 'B', 14)
            pdf.cell(0, 10, '3. Conclusion', 0, 1)
            pdf.set_font('Arial', '', 12)
            
            conclusion_text = """
            Cette analyse r√©v√®le plusieurs insights cl√©s sur la perception des DeepFakes :
            
            - Une bonne connaissance g√©n√©rale mais des niveaux de compr√©hension variables
            - Une exposition importante via certaines plateformes sociales
            - Un impact per√ßu comme majoritairement n√©gatif sur la soci√©t√©
            - Des diff√©rences significatives selon l'√¢ge et le genre
            
            Ces r√©sultats soulignent l'importance de :
            1. Sensibiliser davantage aux risques des DeepFakes
            2. D√©velopper des outils de d√©tection accessibles
            3. Renforcer l'√©ducation aux m√©dias
            """
            pdf.multi_cell(0, 10, conclusion_text)
            
        # Pied de page
        pdf.set_font('Arial', 'I', 8)
        pdf.cell(0, 10, f"Document g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y %H:%M')}", 0, 0, 'C')

        # Retourne le PDF sous forme de bytes
        output_data = pdf.output(dest='S')
        return output_data if isinstance(output_data, bytes) else output_data.encode('latin1')

    
    except Exception as e:
        st.error(f"Erreur g√©n√©ration rapport: {str(e)}")
        return None
    
    class PDF(FPDF):
        def footer(self):
            self.set_y(-15)
            self.set_font('Arial', 'I', 8)
            self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')

# =============================================
# BOUTON DE TELECHARGEMENT DU RAPPORT
# =============================================
with tab1:
    if not filtered_df.empty:
        if st.button("üìÑ T√©l√©charger le rapport d'analyse (PDF)"):
            with st.spinner("G√©n√©ration du rapport en cours..."):
                report_bytes = generate_analysis_report(filtered_df)
                
                if report_bytes:
                    st.download_button(
                        label="‚¨áÔ∏è T√©l√©charger le rapport",
                        data=report_bytes,
                        file_name="rapport_analyse_deepfakes.pdf",
                        mime="application/pdf"
                    )

# =============================================
# ONGLETS EN CONSTRUCTION - MESSAGE EDITEUR
# =============================================

with tab4:
    st.markdown("### üë©‚Äçüíª MESSAGE DEVELOPPEUSE")
    col_img, col_msg = st.columns([1, 5])
    with col_img:
        st.image("images.jpeg", width=100)
    with col_msg:
        st.info("Cet onglet est en cours de r√©daction. Vous verrez des visualisations sous peu.")

with tab5:
    st.markdown("### üë©‚Äçüíª MESSAGE DEVELOPPEUSE")
    col_img, col_msg = st.columns([1, 5])
    with col_img:
        st.image("images.jpeg", width=100)
    with col_msg:
        st.info("Cet onglet est en cours de r√©daction. Vous verrez des visualisations sous peu.")
